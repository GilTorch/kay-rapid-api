# import  RoomCreateWithoutHouseInput,Room,PictureCreateInput, State, Country , House , Commune, City, User from "./generated/prisma.graphql"


type Query {
  countries: [Country!]!
  states: [State!]!
  cities: [City!]!
  communes: [Commune!]!
  getToken(id: String!): String!
  Houses: [House!]!
  topCommunes(c: Int!): [Commune!]!
  topCity(c: Int!): [Commune!]!
  topStates(c: Int!): [State!]!
}

type AuthPayLoad {
  token: String!
  user: User!
}

type Message {
  message: String!
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    phone1: String!
    profilePicture: String
  ): AuthPayLoad
  login(email: String!, password: String!): AuthPayLoad!
  authenticateFBUser(facebookToken: String!): AuthPayLoad!
  disableUser(id: String!): Boolean!
  requestPWResetToken(email: String!): Message!
  resetPassword(
    resetToken: String!
    password: String!
    passwordConfirm: String!
  ): AuthPayLoad
  createCountry(name: String!): Country
  createState(name: String!, idCountry: ID!): State
  createCity(name: String!, idState: ID!): City
  createCommune(name: String!, idCity: ID!): Commune
  createHouse(
    area: Int
    age: Int!
    shortDescription: String
    description: String
    maxGuests: Int!
    numBedrooms: Int!
    numBaths: Int!
    basePrice: Int!
    numLivingrooms: Int!
    numDiningrooms: Int!
    highestPrice: Int!
    currency: CURRENCY
    income: Int!
    lat: Float
    lng: Float
    address: String
    communeId: String
    leaseType: HOUSE_LEASE_TYPE
    type: HOUSE_TYPES
    residency: House_RESIDENCY
    lease: Int!
    electricity: Boolean
    electricity_frequency: FREQUENCY
    water_pipe: Boolean
    water_tank: Boolean
    water_frequency: FREQUENCY
    elevator: Boolean
    petsAllowed: Boolean
    internet: Boolean
    kitchen: Boolean
    wirelessInternet: Boolean
    familyKidFriendly: Boolean
    freeParkingOnPremises: Boolean
    hotTub: Boolean
    pool: Boolean
    smokingAllowed: Boolean
    wheelchairAccessible: Boolean
    cableTv: Boolean
    suitableForEvents: Boolean
    dryer: Boolean
    washer: Boolean
    indoorFireHouse: Boolean
    tv: Boolean
    heating: Boolean
    hangers: Boolean
    iron: Boolean
    hairDryer: Boolean
    doorman: Boolean
    paidParkingOffPremises: Boolean
    freeParkingOnStreet: Boolean
    gym: Boolean
    airConditioning: Boolean
    shampoo: Boolean
    essentials: Boolean
    laptopFriendlyWorkspace: Boolean
    privateEntrance: Boolean
    buzzerWirelessIntercom: Boolean
    bathtub: Boolean
    crib: Boolean
    rooms: [RoomCreateWithoutHouseInput]
    previewImage: String
  ): House
  updateHouse(
    area: Int
    age: Int
    shortDescription: String
    description: String
    maxGuests: Int
    numBedrooms: Int
    numBaths: Int
    numLivingrooms: Int
    numDiningrooms: Int
    basePrice: Int
    highestPrice: Int
    currency: CURRENCY
    income: Int
    lat: Float
    lng: Float
    address: String
    communeId: String
    leaseType: HOUSE_LEASE_TYPE
    type: HOUSE_TYPES
    residency: House_RESIDENCY
    lease: Int
    electricity: Boolean
    electricity_frequency: FREQUENCY
    water_pipe: Boolean
    water_tank: Boolean
    water_frequency: FREQUENCY
    elevator: Boolean
    petsAllowed: Boolean
    internet: Boolean
    kitchen: Boolean
    wirelessInternet: Boolean
    familyKidFriendly: Boolean
    freeParkingOnPremises: Boolean
    hotTub: Boolean
    pool: Boolean
    smokingAllowed: Boolean
    wheelchairAccessible: Boolean
    cableTv: Boolean
    suitableForEvents: Boolean
    dryer: Boolean
    washer: Boolean
    indoorFireHouse: Boolean
    tv: Boolean
    heating: Boolean
    hangers: Boolean
    iron: Boolean
    hairDryer: Boolean
    doorman: Boolean
    paidParkingOffPremises: Boolean
    freeParkingOnStreet: Boolean
    gym: Boolean
    airConditioning: Boolean
    shampoo: Boolean
    essentials: Boolean
    laptopFriendlyWorkspace: Boolean
    privateEntrance: Boolean
    buzzerWirelessIntercom: Boolean
    bathtub: Boolean
    crib: Boolean
    rooms: [RoomCreateWithoutHouseInput]
    previewImage: String
  ): House
  deleteHouse(id: String!): House
  addroomManyPicture(
    label: String!
    houseId: String!
    picture_previews: [PictureCreateInput!]
  ): Room

  createFavoriteHouse(idHouse: String!, idUser: String!): House
}
