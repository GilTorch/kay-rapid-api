# source: https://us1.prisma.sh/peterson-jean-48f374/api-lakayou/api-lakayou
# timestamp: Tue Nov 20 2018 17:43:30 GMT-0500 (Eastern Standard Time)

type AggregateAmenities {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateCity {
  count: Int!
}

type AggregateCommune {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateCreditCardInformation {
  count: Int!
}

type AggregateHouse {
  count: Int!
}

type AggregateHouse_Favorited {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateNegotiation {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePaymentAccount {
  count: Int!
}

type AggregatePaymentHouse {
  count: Int!
}

type AggregatePaymentLanlordInfo {
  count: Int!
}

type AggregatePaypalInformation {
  count: Int!
}

type AggregatePicture {
  count: Int!
}

type AggregatePricing {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateState {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type AggregateViews {
  count: Int!
}

type Amenities implements Node {
  id: ID!
  House: House!
  electricity: Boolean!
  electricity_frequency: FREQUENCY
  water_pipe: Boolean!
  water_tank: Boolean!
  water_frequency: FREQUENCY
  elevator: Boolean!
  petsAllowed: Boolean!
  internet: Boolean!
  kitchen: Boolean!
  wirelessInternet: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  hotTub: Boolean!
  pool: Boolean!
  smokingAllowed: Boolean!
  wheelchairAccessible: Boolean!
  cableTv: Boolean!
  suitableForEvents: Boolean!
  dryer: Boolean!
  washer: Boolean!
  indoorFireHouse: Boolean!
  tv: Boolean!
  heating: Boolean!
  hangers: Boolean!
  iron: Boolean!
  hairDryer: Boolean!
  doorman: Boolean!
  paidParkingOffPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  airConditioning: Boolean!
  shampoo: Boolean!
  essentials: Boolean!
  laptopFriendlyWorkspace: Boolean!
  privateEntrance: Boolean!
  buzzerWirelessIntercom: Boolean!
  bathtub: Boolean!
  crib: Boolean!
}

"""A connection to a list of items."""
type AmenitiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AmenitiesEdge]!
  aggregate: AggregateAmenities!
}

input AmenitiesCreateInput {
  electricity: Boolean
  electricity_frequency: FREQUENCY
  water_pipe: Boolean
  water_tank: Boolean
  water_frequency: FREQUENCY
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireHouse: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  bathtub: Boolean
  crib: Boolean
  House: HouseCreateOneWithoutAmenitiesInput!
}

input AmenitiesCreateOneWithoutHouseInput {
  create: AmenitiesCreateWithoutHouseInput
  connect: AmenitiesWhereUniqueInput
}

input AmenitiesCreateWithoutHouseInput {
  electricity: Boolean
  electricity_frequency: FREQUENCY
  water_pipe: Boolean
  water_tank: Boolean
  water_frequency: FREQUENCY
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireHouse: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  bathtub: Boolean
  crib: Boolean
}

"""An edge in a connection."""
type AmenitiesEdge {
  """The item at the end of the edge."""
  node: Amenities!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AmenitiesOrderByInput {
  id_ASC
  id_DESC
  electricity_ASC
  electricity_DESC
  electricity_frequency_ASC
  electricity_frequency_DESC
  water_pipe_ASC
  water_pipe_DESC
  water_tank_ASC
  water_tank_DESC
  water_frequency_ASC
  water_frequency_DESC
  elevator_ASC
  elevator_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  internet_ASC
  internet_DESC
  kitchen_ASC
  kitchen_DESC
  wirelessInternet_ASC
  wirelessInternet_DESC
  familyKidFriendly_ASC
  familyKidFriendly_DESC
  freeParkingOnPremises_ASC
  freeParkingOnPremises_DESC
  hotTub_ASC
  hotTub_DESC
  pool_ASC
  pool_DESC
  smokingAllowed_ASC
  smokingAllowed_DESC
  wheelchairAccessible_ASC
  wheelchairAccessible_DESC
  cableTv_ASC
  cableTv_DESC
  suitableForEvents_ASC
  suitableForEvents_DESC
  dryer_ASC
  dryer_DESC
  washer_ASC
  washer_DESC
  indoorFireHouse_ASC
  indoorFireHouse_DESC
  tv_ASC
  tv_DESC
  heating_ASC
  heating_DESC
  hangers_ASC
  hangers_DESC
  iron_ASC
  iron_DESC
  hairDryer_ASC
  hairDryer_DESC
  doorman_ASC
  doorman_DESC
  paidParkingOffPremises_ASC
  paidParkingOffPremises_DESC
  freeParkingOnStreet_ASC
  freeParkingOnStreet_DESC
  gym_ASC
  gym_DESC
  airConditioning_ASC
  airConditioning_DESC
  shampoo_ASC
  shampoo_DESC
  essentials_ASC
  essentials_DESC
  laptopFriendlyWorkspace_ASC
  laptopFriendlyWorkspace_DESC
  privateEntrance_ASC
  privateEntrance_DESC
  buzzerWirelessIntercom_ASC
  buzzerWirelessIntercom_DESC
  bathtub_ASC
  bathtub_DESC
  crib_ASC
  crib_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AmenitiesPreviousValues {
  id: ID!
  electricity: Boolean!
  electricity_frequency: FREQUENCY
  water_pipe: Boolean!
  water_tank: Boolean!
  water_frequency: FREQUENCY
  elevator: Boolean!
  petsAllowed: Boolean!
  internet: Boolean!
  kitchen: Boolean!
  wirelessInternet: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  hotTub: Boolean!
  pool: Boolean!
  smokingAllowed: Boolean!
  wheelchairAccessible: Boolean!
  cableTv: Boolean!
  suitableForEvents: Boolean!
  dryer: Boolean!
  washer: Boolean!
  indoorFireHouse: Boolean!
  tv: Boolean!
  heating: Boolean!
  hangers: Boolean!
  iron: Boolean!
  hairDryer: Boolean!
  doorman: Boolean!
  paidParkingOffPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  airConditioning: Boolean!
  shampoo: Boolean!
  essentials: Boolean!
  laptopFriendlyWorkspace: Boolean!
  privateEntrance: Boolean!
  buzzerWirelessIntercom: Boolean!
  bathtub: Boolean!
  crib: Boolean!
}

type AmenitiesSubscriptionPayload {
  mutation: MutationType!
  node: Amenities
  updatedFields: [String!]
  previousValues: AmenitiesPreviousValues
}

input AmenitiesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AmenitiesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AmenitiesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AmenitiesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AmenitiesWhereInput
}

input AmenitiesUpdateInput {
  electricity: Boolean
  electricity_frequency: FREQUENCY
  water_pipe: Boolean
  water_tank: Boolean
  water_frequency: FREQUENCY
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireHouse: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  bathtub: Boolean
  crib: Boolean
  House: HouseUpdateOneRequiredWithoutAmenitiesInput
}

input AmenitiesUpdateManyMutationInput {
  electricity: Boolean
  electricity_frequency: FREQUENCY
  water_pipe: Boolean
  water_tank: Boolean
  water_frequency: FREQUENCY
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireHouse: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  bathtub: Boolean
  crib: Boolean
}

input AmenitiesUpdateOneRequiredWithoutHouseInput {
  create: AmenitiesCreateWithoutHouseInput
  connect: AmenitiesWhereUniqueInput
  update: AmenitiesUpdateWithoutHouseDataInput
  upsert: AmenitiesUpsertWithoutHouseInput
}

input AmenitiesUpdateWithoutHouseDataInput {
  electricity: Boolean
  electricity_frequency: FREQUENCY
  water_pipe: Boolean
  water_tank: Boolean
  water_frequency: FREQUENCY
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireHouse: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  bathtub: Boolean
  crib: Boolean
}

input AmenitiesUpsertWithoutHouseInput {
  update: AmenitiesUpdateWithoutHouseDataInput!
  create: AmenitiesCreateWithoutHouseInput!
}

input AmenitiesWhereInput {
  """Logical AND on all given filters."""
  AND: [AmenitiesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AmenitiesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AmenitiesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  electricity: Boolean

  """All values that are not equal to given value."""
  electricity_not: Boolean
  electricity_frequency: FREQUENCY

  """All values that are not equal to given value."""
  electricity_frequency_not: FREQUENCY

  """All values that are contained in given list."""
  electricity_frequency_in: [FREQUENCY!]

  """All values that are not contained in given list."""
  electricity_frequency_not_in: [FREQUENCY!]
  water_pipe: Boolean

  """All values that are not equal to given value."""
  water_pipe_not: Boolean
  water_tank: Boolean

  """All values that are not equal to given value."""
  water_tank_not: Boolean
  water_frequency: FREQUENCY

  """All values that are not equal to given value."""
  water_frequency_not: FREQUENCY

  """All values that are contained in given list."""
  water_frequency_in: [FREQUENCY!]

  """All values that are not contained in given list."""
  water_frequency_not_in: [FREQUENCY!]
  elevator: Boolean

  """All values that are not equal to given value."""
  elevator_not: Boolean
  petsAllowed: Boolean

  """All values that are not equal to given value."""
  petsAllowed_not: Boolean
  internet: Boolean

  """All values that are not equal to given value."""
  internet_not: Boolean
  kitchen: Boolean

  """All values that are not equal to given value."""
  kitchen_not: Boolean
  wirelessInternet: Boolean

  """All values that are not equal to given value."""
  wirelessInternet_not: Boolean
  familyKidFriendly: Boolean

  """All values that are not equal to given value."""
  familyKidFriendly_not: Boolean
  freeParkingOnPremises: Boolean

  """All values that are not equal to given value."""
  freeParkingOnPremises_not: Boolean
  hotTub: Boolean

  """All values that are not equal to given value."""
  hotTub_not: Boolean
  pool: Boolean

  """All values that are not equal to given value."""
  pool_not: Boolean
  smokingAllowed: Boolean

  """All values that are not equal to given value."""
  smokingAllowed_not: Boolean
  wheelchairAccessible: Boolean

  """All values that are not equal to given value."""
  wheelchairAccessible_not: Boolean
  cableTv: Boolean

  """All values that are not equal to given value."""
  cableTv_not: Boolean
  suitableForEvents: Boolean

  """All values that are not equal to given value."""
  suitableForEvents_not: Boolean
  dryer: Boolean

  """All values that are not equal to given value."""
  dryer_not: Boolean
  washer: Boolean

  """All values that are not equal to given value."""
  washer_not: Boolean
  indoorFireHouse: Boolean

  """All values that are not equal to given value."""
  indoorFireHouse_not: Boolean
  tv: Boolean

  """All values that are not equal to given value."""
  tv_not: Boolean
  heating: Boolean

  """All values that are not equal to given value."""
  heating_not: Boolean
  hangers: Boolean

  """All values that are not equal to given value."""
  hangers_not: Boolean
  iron: Boolean

  """All values that are not equal to given value."""
  iron_not: Boolean
  hairDryer: Boolean

  """All values that are not equal to given value."""
  hairDryer_not: Boolean
  doorman: Boolean

  """All values that are not equal to given value."""
  doorman_not: Boolean
  paidParkingOffPremises: Boolean

  """All values that are not equal to given value."""
  paidParkingOffPremises_not: Boolean
  freeParkingOnStreet: Boolean

  """All values that are not equal to given value."""
  freeParkingOnStreet_not: Boolean
  gym: Boolean

  """All values that are not equal to given value."""
  gym_not: Boolean
  airConditioning: Boolean

  """All values that are not equal to given value."""
  airConditioning_not: Boolean
  shampoo: Boolean

  """All values that are not equal to given value."""
  shampoo_not: Boolean
  essentials: Boolean

  """All values that are not equal to given value."""
  essentials_not: Boolean
  laptopFriendlyWorkspace: Boolean

  """All values that are not equal to given value."""
  laptopFriendlyWorkspace_not: Boolean
  privateEntrance: Boolean

  """All values that are not equal to given value."""
  privateEntrance_not: Boolean
  buzzerWirelessIntercom: Boolean

  """All values that are not equal to given value."""
  buzzerWirelessIntercom_not: Boolean
  bathtub: Boolean

  """All values that are not equal to given value."""
  bathtub_not: Boolean
  crib: Boolean

  """All values that are not equal to given value."""
  crib_not: Boolean
  House: HouseWhereInput
}

input AmenitiesWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Booking implements Node {
  id: ID!
  createdAt: DateTime!
  bookee: User!
  House: House!
  startDate: DateTime!
  endDate: DateTime!
  payment: PaymentHouse!
}

"""A connection to a list of items."""
type BookingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  House: HouseCreateOneWithoutBookingsInput!
  payment: PaymentHouseCreateOneWithoutBookingInput!
}

input BookingCreateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutHouseInput {
  create: [BookingCreateWithoutHouseInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateOneWithoutPaymentInput {
  create: BookingCreateWithoutPaymentInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutBookeeInput {
  startDate: DateTime!
  endDate: DateTime!
  House: HouseCreateOneWithoutBookingsInput!
  payment: PaymentHouseCreateOneWithoutBookingInput!
}

input BookingCreateWithoutHouseInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  payment: PaymentHouseCreateOneWithoutBookingInput!
}

input BookingCreateWithoutPaymentInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  House: HouseCreateOneWithoutBookingsInput!
}

"""An edge in a connection."""
type BookingEdge {
  """The item at the end of the edge."""
  node: Booking!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookingPreviousValues {
  id: ID!
  createdAt: DateTime!
  startDate: DateTime!
  endDate: DateTime!
}

input BookingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
}

input BookingUpdateInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneRequiredWithoutBookingsInput
  House: HouseUpdateOneRequiredWithoutBookingsInput
  payment: PaymentHouseUpdateOneRequiredWithoutBookingInput
}

input BookingUpdateManyDataInput {
  startDate: DateTime
  endDate: DateTime
}

input BookingUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input BookingUpdateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutBookeeInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutBookeeInput!]
}

input BookingUpdateManyWithoutHouseInput {
  create: [BookingCreateWithoutHouseInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutHouseInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutHouseInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateOneRequiredWithoutPaymentInput {
  create: BookingCreateWithoutPaymentInput
  connect: BookingWhereUniqueInput
  update: BookingUpdateWithoutPaymentDataInput
  upsert: BookingUpsertWithoutPaymentInput
}

input BookingUpdateWithoutBookeeDataInput {
  startDate: DateTime
  endDate: DateTime
  House: HouseUpdateOneRequiredWithoutBookingsInput
  payment: PaymentHouseUpdateOneRequiredWithoutBookingInput
}

input BookingUpdateWithoutHouseDataInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneRequiredWithoutBookingsInput
  payment: PaymentHouseUpdateOneRequiredWithoutBookingInput
}

input BookingUpdateWithoutPaymentDataInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneRequiredWithoutBookingsInput
  House: HouseUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateWithWhereUniqueWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookeeDataInput!
}

input BookingUpdateWithWhereUniqueWithoutHouseInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutHouseDataInput!
}

input BookingUpsertWithoutPaymentInput {
  update: BookingUpdateWithoutPaymentDataInput!
  create: BookingCreateWithoutPaymentInput!
}

input BookingUpsertWithWhereUniqueWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookeeDataInput!
  create: BookingCreateWithoutBookeeInput!
}

input BookingUpsertWithWhereUniqueWithoutHouseInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutHouseDataInput!
  create: BookingCreateWithoutHouseInput!
}

input BookingWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  bookee: UserWhereInput
  House: HouseWhereInput
  payment: PaymentHouseWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

type City implements Node {
  id: ID!
  name: String!
  rank: Int
  state: State!
}

"""A connection to a list of items."""
type CityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CityEdge]!
  aggregate: AggregateCity!
}

input CityCreateInput {
  name: String!
  rank: Int
  state: StateCreateOneInput!
}

input CityCreateOneInput {
  create: CityCreateInput
  connect: CityWhereUniqueInput
}

"""An edge in a connection."""
type CityEdge {
  """The item at the end of the edge."""
  node: City!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rank_ASC
  rank_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CityPreviousValues {
  id: ID!
  name: String!
  rank: Int
}

type CitySubscriptionPayload {
  mutation: MutationType!
  node: City
  updatedFields: [String!]
  previousValues: CityPreviousValues
}

input CitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CityWhereInput
}

input CityUpdateDataInput {
  name: String
  rank: Int
  state: StateUpdateOneRequiredInput
}

input CityUpdateInput {
  name: String
  rank: Int
  state: StateUpdateOneRequiredInput
}

input CityUpdateManyMutationInput {
  name: String
  rank: Int
}

input CityUpdateOneRequiredInput {
  create: CityCreateInput
  connect: CityWhereUniqueInput
  update: CityUpdateDataInput
  upsert: CityUpsertNestedInput
}

input CityUpsertNestedInput {
  update: CityUpdateDataInput!
  create: CityCreateInput!
}

input CityWhereInput {
  """Logical AND on all given filters."""
  AND: [CityWhereInput!]

  """Logical OR on all given filters."""
  OR: [CityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  state: StateWhereInput
}

input CityWhereUniqueInput {
  id: ID
}

type Commune implements Node {
  id: ID!
  name: String!
  rank: Int
  city: City!
}

"""A connection to a list of items."""
type CommuneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommuneEdge]!
  aggregate: AggregateCommune!
}

input CommuneCreateInput {
  name: String!
  rank: Int
  city: CityCreateOneInput!
}

input CommuneCreateOneInput {
  create: CommuneCreateInput
  connect: CommuneWhereUniqueInput
}

"""An edge in a connection."""
type CommuneEdge {
  """The item at the end of the edge."""
  node: Commune!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommuneOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rank_ASC
  rank_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommunePreviousValues {
  id: ID!
  name: String!
  rank: Int
}

type CommuneSubscriptionPayload {
  mutation: MutationType!
  node: Commune
  updatedFields: [String!]
  previousValues: CommunePreviousValues
}

input CommuneSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommuneSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommuneSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommuneSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommuneWhereInput
}

input CommuneUpdateDataInput {
  name: String
  rank: Int
  city: CityUpdateOneRequiredInput
}

input CommuneUpdateInput {
  name: String
  rank: Int
  city: CityUpdateOneRequiredInput
}

input CommuneUpdateManyMutationInput {
  name: String
  rank: Int
}

input CommuneUpdateOneInput {
  create: CommuneCreateInput
  connect: CommuneWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CommuneUpdateDataInput
  upsert: CommuneUpsertNestedInput
}

input CommuneUpsertNestedInput {
  update: CommuneUpdateDataInput!
  create: CommuneCreateInput!
}

input CommuneWhereInput {
  """Logical AND on all given filters."""
  AND: [CommuneWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommuneWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommuneWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  city: CityWhereInput
}

input CommuneWhereUniqueInput {
  id: ID
}

type Country implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  name: String!
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CountryPreviousValues {
  id: ID!
  name: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateDataInput {
  name: String
}

input CountryUpdateInput {
  name: String
}

input CountryUpdateManyMutationInput {
  name: String
}

input CountryUpdateOneRequiredInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateDataInput
  upsert: CountryUpsertNestedInput
}

input CountryUpsertNestedInput {
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input CountryWhereUniqueInput {
  id: ID
}

type CreditCardInformation implements Node {
  id: ID!
  createdAt: DateTime!
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
  paymentAccount: PaymentAccount
}

"""A connection to a list of items."""
type CreditCardInformationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardInformationEdge]!
  aggregate: AggregateCreditCardInformation!
}

input CreditCardInformationCreateInput {
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
  paymentAccount: PaymentAccountCreateOneWithoutCreditcardInput
}

input CreditCardInformationCreateOneWithoutPaymentAccountInput {
  create: CreditCardInformationCreateWithoutPaymentAccountInput
  connect: CreditCardInformationWhereUniqueInput
}

input CreditCardInformationCreateWithoutPaymentAccountInput {
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
}

"""An edge in a connection."""
type CreditCardInformationEdge {
  """The item at the end of the edge."""
  node: CreditCardInformation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CreditCardInformationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  cardNumber_ASC
  cardNumber_DESC
  expiresOnMonth_ASC
  expiresOnMonth_DESC
  expiresOnYear_ASC
  expiresOnYear_DESC
  securityCode_ASC
  securityCode_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  postalCode_ASC
  postalCode_DESC
  country_ASC
  country_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CreditCardInformationPreviousValues {
  id: ID!
  createdAt: DateTime!
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
}

type CreditCardInformationSubscriptionPayload {
  mutation: MutationType!
  node: CreditCardInformation
  updatedFields: [String!]
  previousValues: CreditCardInformationPreviousValues
}

input CreditCardInformationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardInformationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardInformationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardInformationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CreditCardInformationWhereInput
}

input CreditCardInformationUpdateInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
  paymentAccount: PaymentAccountUpdateOneWithoutCreditcardInput
}

input CreditCardInformationUpdateManyMutationInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
}

input CreditCardInformationUpdateOneWithoutPaymentAccountInput {
  create: CreditCardInformationCreateWithoutPaymentAccountInput
  connect: CreditCardInformationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CreditCardInformationUpdateWithoutPaymentAccountDataInput
  upsert: CreditCardInformationUpsertWithoutPaymentAccountInput
}

input CreditCardInformationUpdateWithoutPaymentAccountDataInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
}

input CreditCardInformationUpsertWithoutPaymentAccountInput {
  update: CreditCardInformationUpdateWithoutPaymentAccountDataInput!
  create: CreditCardInformationCreateWithoutPaymentAccountInput!
}

input CreditCardInformationWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardInformationWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardInformationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardInformationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  cardNumber: String

  """All values that are not equal to given value."""
  cardNumber_not: String

  """All values that are contained in given list."""
  cardNumber_in: [String!]

  """All values that are not contained in given list."""
  cardNumber_not_in: [String!]

  """All values less than the given value."""
  cardNumber_lt: String

  """All values less than or equal the given value."""
  cardNumber_lte: String

  """All values greater than the given value."""
  cardNumber_gt: String

  """All values greater than or equal the given value."""
  cardNumber_gte: String

  """All values containing the given string."""
  cardNumber_contains: String

  """All values not containing the given string."""
  cardNumber_not_contains: String

  """All values starting with the given string."""
  cardNumber_starts_with: String

  """All values not starting with the given string."""
  cardNumber_not_starts_with: String

  """All values ending with the given string."""
  cardNumber_ends_with: String

  """All values not ending with the given string."""
  cardNumber_not_ends_with: String
  expiresOnMonth: Int

  """All values that are not equal to given value."""
  expiresOnMonth_not: Int

  """All values that are contained in given list."""
  expiresOnMonth_in: [Int!]

  """All values that are not contained in given list."""
  expiresOnMonth_not_in: [Int!]

  """All values less than the given value."""
  expiresOnMonth_lt: Int

  """All values less than or equal the given value."""
  expiresOnMonth_lte: Int

  """All values greater than the given value."""
  expiresOnMonth_gt: Int

  """All values greater than or equal the given value."""
  expiresOnMonth_gte: Int
  expiresOnYear: Int

  """All values that are not equal to given value."""
  expiresOnYear_not: Int

  """All values that are contained in given list."""
  expiresOnYear_in: [Int!]

  """All values that are not contained in given list."""
  expiresOnYear_not_in: [Int!]

  """All values less than the given value."""
  expiresOnYear_lt: Int

  """All values less than or equal the given value."""
  expiresOnYear_lte: Int

  """All values greater than the given value."""
  expiresOnYear_gt: Int

  """All values greater than or equal the given value."""
  expiresOnYear_gte: Int
  securityCode: String

  """All values that are not equal to given value."""
  securityCode_not: String

  """All values that are contained in given list."""
  securityCode_in: [String!]

  """All values that are not contained in given list."""
  securityCode_not_in: [String!]

  """All values less than the given value."""
  securityCode_lt: String

  """All values less than or equal the given value."""
  securityCode_lte: String

  """All values greater than the given value."""
  securityCode_gt: String

  """All values greater than or equal the given value."""
  securityCode_gte: String

  """All values containing the given string."""
  securityCode_contains: String

  """All values not containing the given string."""
  securityCode_not_contains: String

  """All values starting with the given string."""
  securityCode_starts_with: String

  """All values not starting with the given string."""
  securityCode_not_starts_with: String

  """All values ending with the given string."""
  securityCode_ends_with: String

  """All values not ending with the given string."""
  securityCode_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  postalCode: String

  """All values that are not equal to given value."""
  postalCode_not: String

  """All values that are contained in given list."""
  postalCode_in: [String!]

  """All values that are not contained in given list."""
  postalCode_not_in: [String!]

  """All values less than the given value."""
  postalCode_lt: String

  """All values less than or equal the given value."""
  postalCode_lte: String

  """All values greater than the given value."""
  postalCode_gt: String

  """All values greater than or equal the given value."""
  postalCode_gte: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values starting with the given string."""
  postalCode_starts_with: String

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values not ending with the given string."""
  postalCode_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  paymentAccount: PaymentAccountWhereInput
}

input CreditCardInformationWhereUniqueInput {
  id: ID
}

enum CURRENCY {
  HTG
  USD
}

scalar DateTime

enum FREQUENCY {
  NEVER
  SOMETIMES
  OFTEN
  ALWAYS
}

type House implements Node {
  id: ID!
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  amenities: Amenities!
  host: User!
  pricing: Pricing!
  location: Location!
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean!
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  views: Views
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture!]
  contactInfoPayments(where: PaymentLanlordInfoWhereInput, orderBy: PaymentLanlordInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentLanlordInfo!]
  popularity: Int!
}

type House_Favorited implements Node {
  id: ID!
  createdAt: DateTime!
  user: User!
  house: House!
}

"""A connection to a list of items."""
type House_FavoritedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [House_FavoritedEdge]!
  aggregate: AggregateHouse_Favorited!
}

input House_FavoritedCreateInput {
  user: UserCreateOneInput!
  house: HouseCreateOneInput!
}

"""An edge in a connection."""
type House_FavoritedEdge {
  """The item at the end of the edge."""
  node: House_Favorited!

  """A cursor for use in pagination."""
  cursor: String!
}

enum House_FavoritedOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type House_FavoritedPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type House_FavoritedSubscriptionPayload {
  mutation: MutationType!
  node: House_Favorited
  updatedFields: [String!]
  previousValues: House_FavoritedPreviousValues
}

input House_FavoritedSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [House_FavoritedSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [House_FavoritedSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [House_FavoritedSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: House_FavoritedWhereInput
}

input House_FavoritedUpdateInput {
  user: UserUpdateOneRequiredInput
  house: HouseUpdateOneRequiredInput
}

input House_FavoritedWhereInput {
  """Logical AND on all given filters."""
  AND: [House_FavoritedWhereInput!]

  """Logical OR on all given filters."""
  OR: [House_FavoritedWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [House_FavoritedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
  house: HouseWhereInput
}

input House_FavoritedWhereUniqueInput {
  id: ID
}

enum HOUSE_LEASE_TYPE {
  WEEKLY
  MONTHLY
  YEARLY
}

enum House_RESIDENCY {
  BUSINESS
  RESIDENCE
}

enum HOUSE_TYPES {
  APARTMENT
  VILLA
  STUDIO
}

"""A connection to a list of items."""
type HouseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HouseEdge]!
  aggregate: AggregateHouse!
}

input HouseCreateInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateManyWithoutHostInput {
  create: [HouseCreateWithoutHostInput!]
  connect: [HouseWhereUniqueInput!]
}

input HouseCreateOneInput {
  create: HouseCreateInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutAmenitiesInput {
  create: HouseCreateWithoutAmenitiesInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutBookingsInput {
  create: HouseCreateWithoutBookingsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutContactInfoPaymentsInput {
  create: HouseCreateWithoutContactInfoPaymentsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutPricingInput {
  create: HouseCreateWithoutPricingInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutReviewsInput {
  create: HouseCreateWithoutReviewsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutRoomsInput {
  create: HouseCreateWithoutRoomsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutViewsInput {
  create: HouseCreateWithoutViewsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateWithoutAmenitiesInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutBookingsInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutContactInfoPaymentsInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
}

input HouseCreateWithoutHostInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutPricingInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutReviewsInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutRoomsInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  views: ViewsCreateOneWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

input HouseCreateWithoutViewsInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int
  reviews: ReviewCreateManyWithoutHouseInput
  amenities: AmenitiesCreateOneWithoutHouseInput!
  host: UserCreateOneWithoutOwnedHousesInput!
  pricing: PricingCreateOneWithoutHouseInput!
  location: LocationCreateOneInput!
  rooms: RoomCreateManyWithoutHouseInput
  bookings: BookingCreateManyWithoutHouseInput
  pictures: PictureCreateManyInput
  contactInfoPayments: PaymentLanlordInfoCreateManyWithoutHouseInput
}

"""An edge in a connection."""
type HouseEdge {
  """The item at the end of the edge."""
  node: House!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HouseOrderByInput {
  id_ASC
  id_DESC
  area_ASC
  area_DESC
  age_ASC
  age_DESC
  shortDescription_ASC
  shortDescription_DESC
  description_ASC
  description_DESC
  maxGuests_ASC
  maxGuests_DESC
  numBedrooms_ASC
  numBedrooms_DESC
  numBaths_ASC
  numBaths_DESC
  numLivingrooms_ASC
  numLivingrooms_DESC
  numDiningrooms_ASC
  numDiningrooms_DESC
  leaseType_ASC
  leaseType_DESC
  verified_ASC
  verified_DESC
  type_ASC
  type_DESC
  residency_ASC
  residency_DESC
  lease_ASC
  lease_DESC
  popularity_ASC
  popularity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HousePreviousValues {
  id: ID!
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int!
  numBedrooms: Int!
  numBaths: Int!
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean!
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int!
  popularity: Int!
}

input HouseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  area: Int

  """All values that are not equal to given value."""
  area_not: Int

  """All values that are contained in given list."""
  area_in: [Int!]

  """All values that are not contained in given list."""
  area_not_in: [Int!]

  """All values less than the given value."""
  area_lt: Int

  """All values less than or equal the given value."""
  area_lte: Int

  """All values greater than the given value."""
  area_gt: Int

  """All values greater than or equal the given value."""
  area_gte: Int
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  shortDescription: String

  """All values that are not equal to given value."""
  shortDescription_not: String

  """All values that are contained in given list."""
  shortDescription_in: [String!]

  """All values that are not contained in given list."""
  shortDescription_not_in: [String!]

  """All values less than the given value."""
  shortDescription_lt: String

  """All values less than or equal the given value."""
  shortDescription_lte: String

  """All values greater than the given value."""
  shortDescription_gt: String

  """All values greater than or equal the given value."""
  shortDescription_gte: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values starting with the given string."""
  shortDescription_starts_with: String

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values not ending with the given string."""
  shortDescription_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  maxGuests: Int

  """All values that are not equal to given value."""
  maxGuests_not: Int

  """All values that are contained in given list."""
  maxGuests_in: [Int!]

  """All values that are not contained in given list."""
  maxGuests_not_in: [Int!]

  """All values less than the given value."""
  maxGuests_lt: Int

  """All values less than or equal the given value."""
  maxGuests_lte: Int

  """All values greater than the given value."""
  maxGuests_gt: Int

  """All values greater than or equal the given value."""
  maxGuests_gte: Int
  numBedrooms: Int

  """All values that are not equal to given value."""
  numBedrooms_not: Int

  """All values that are contained in given list."""
  numBedrooms_in: [Int!]

  """All values that are not contained in given list."""
  numBedrooms_not_in: [Int!]

  """All values less than the given value."""
  numBedrooms_lt: Int

  """All values less than or equal the given value."""
  numBedrooms_lte: Int

  """All values greater than the given value."""
  numBedrooms_gt: Int

  """All values greater than or equal the given value."""
  numBedrooms_gte: Int
  numBaths: Int

  """All values that are not equal to given value."""
  numBaths_not: Int

  """All values that are contained in given list."""
  numBaths_in: [Int!]

  """All values that are not contained in given list."""
  numBaths_not_in: [Int!]

  """All values less than the given value."""
  numBaths_lt: Int

  """All values less than or equal the given value."""
  numBaths_lte: Int

  """All values greater than the given value."""
  numBaths_gt: Int

  """All values greater than or equal the given value."""
  numBaths_gte: Int
  numLivingrooms: Int

  """All values that are not equal to given value."""
  numLivingrooms_not: Int

  """All values that are contained in given list."""
  numLivingrooms_in: [Int!]

  """All values that are not contained in given list."""
  numLivingrooms_not_in: [Int!]

  """All values less than the given value."""
  numLivingrooms_lt: Int

  """All values less than or equal the given value."""
  numLivingrooms_lte: Int

  """All values greater than the given value."""
  numLivingrooms_gt: Int

  """All values greater than or equal the given value."""
  numLivingrooms_gte: Int
  numDiningrooms: Int

  """All values that are not equal to given value."""
  numDiningrooms_not: Int

  """All values that are contained in given list."""
  numDiningrooms_in: [Int!]

  """All values that are not contained in given list."""
  numDiningrooms_not_in: [Int!]

  """All values less than the given value."""
  numDiningrooms_lt: Int

  """All values less than or equal the given value."""
  numDiningrooms_lte: Int

  """All values greater than the given value."""
  numDiningrooms_gt: Int

  """All values greater than or equal the given value."""
  numDiningrooms_gte: Int
  leaseType: HOUSE_LEASE_TYPE

  """All values that are not equal to given value."""
  leaseType_not: HOUSE_LEASE_TYPE

  """All values that are contained in given list."""
  leaseType_in: [HOUSE_LEASE_TYPE!]

  """All values that are not contained in given list."""
  leaseType_not_in: [HOUSE_LEASE_TYPE!]
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  type: HOUSE_TYPES

  """All values that are not equal to given value."""
  type_not: HOUSE_TYPES

  """All values that are contained in given list."""
  type_in: [HOUSE_TYPES!]

  """All values that are not contained in given list."""
  type_not_in: [HOUSE_TYPES!]
  residency: House_RESIDENCY

  """All values that are not equal to given value."""
  residency_not: House_RESIDENCY

  """All values that are contained in given list."""
  residency_in: [House_RESIDENCY!]

  """All values that are not contained in given list."""
  residency_not_in: [House_RESIDENCY!]
  lease: Int

  """All values that are not equal to given value."""
  lease_not: Int

  """All values that are contained in given list."""
  lease_in: [Int!]

  """All values that are not contained in given list."""
  lease_not_in: [Int!]

  """All values less than the given value."""
  lease_lt: Int

  """All values less than or equal the given value."""
  lease_lte: Int

  """All values greater than the given value."""
  lease_gt: Int

  """All values greater than or equal the given value."""
  lease_gte: Int
  popularity: Int

  """All values that are not equal to given value."""
  popularity_not: Int

  """All values that are contained in given list."""
  popularity_in: [Int!]

  """All values that are not contained in given list."""
  popularity_not_in: [Int!]

  """All values less than the given value."""
  popularity_lt: Int

  """All values less than or equal the given value."""
  popularity_lte: Int

  """All values greater than the given value."""
  popularity_gt: Int

  """All values greater than or equal the given value."""
  popularity_gte: Int
}

type HouseSubscriptionPayload {
  mutation: MutationType!
  node: House
  updatedFields: [String!]
  previousValues: HousePreviousValues
}

input HouseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HouseWhereInput
}

input HouseUpdateDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateManyDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
}

input HouseUpdateManyMutationInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
}

input HouseUpdateManyWithoutHostInput {
  create: [HouseCreateWithoutHostInput!]
  connect: [HouseWhereUniqueInput!]
  disconnect: [HouseWhereUniqueInput!]
  delete: [HouseWhereUniqueInput!]
  update: [HouseUpdateWithWhereUniqueWithoutHostInput!]
  updateMany: [HouseUpdateManyWithWhereNestedInput!]
  deleteMany: [HouseScalarWhereInput!]
  upsert: [HouseUpsertWithWhereUniqueWithoutHostInput!]
}

input HouseUpdateManyWithWhereNestedInput {
  where: HouseScalarWhereInput!
  data: HouseUpdateManyDataInput!
}

input HouseUpdateOneRequiredInput {
  create: HouseCreateInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateDataInput
  upsert: HouseUpsertNestedInput
}

input HouseUpdateOneRequiredWithoutAmenitiesInput {
  create: HouseCreateWithoutAmenitiesInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutAmenitiesDataInput
  upsert: HouseUpsertWithoutAmenitiesInput
}

input HouseUpdateOneRequiredWithoutBookingsInput {
  create: HouseCreateWithoutBookingsInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutBookingsDataInput
  upsert: HouseUpsertWithoutBookingsInput
}

input HouseUpdateOneRequiredWithoutContactInfoPaymentsInput {
  create: HouseCreateWithoutContactInfoPaymentsInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutContactInfoPaymentsDataInput
  upsert: HouseUpsertWithoutContactInfoPaymentsInput
}

input HouseUpdateOneRequiredWithoutPricingInput {
  create: HouseCreateWithoutPricingInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutPricingDataInput
  upsert: HouseUpsertWithoutPricingInput
}

input HouseUpdateOneRequiredWithoutReviewsInput {
  create: HouseCreateWithoutReviewsInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutReviewsDataInput
  upsert: HouseUpsertWithoutReviewsInput
}

input HouseUpdateOneRequiredWithoutRoomsInput {
  create: HouseCreateWithoutRoomsInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutRoomsDataInput
  upsert: HouseUpsertWithoutRoomsInput
}

input HouseUpdateOneRequiredWithoutViewsInput {
  create: HouseCreateWithoutViewsInput
  connect: HouseWhereUniqueInput
  update: HouseUpdateWithoutViewsDataInput
  upsert: HouseUpsertWithoutViewsInput
}

input HouseUpdateWithoutAmenitiesDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutBookingsDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutContactInfoPaymentsDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
}

input HouseUpdateWithoutHostDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutPricingDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutReviewsDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutRoomsDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  views: ViewsUpdateOneWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutViewsDataInput {
  area: Int
  age: Int
  shortDescription: String
  description: String
  maxGuests: Int
  numBedrooms: Int
  numBaths: Int
  numLivingrooms: Int
  numDiningrooms: Int
  leaseType: HOUSE_LEASE_TYPE
  verified: Boolean
  type: HOUSE_TYPES
  residency: House_RESIDENCY
  lease: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutHouseInput
  amenities: AmenitiesUpdateOneRequiredWithoutHouseInput
  host: UserUpdateOneRequiredWithoutOwnedHousesInput
  pricing: PricingUpdateOneRequiredWithoutHouseInput
  location: LocationUpdateOneRequiredInput
  rooms: RoomUpdateManyWithoutHouseInput
  bookings: BookingUpdateManyWithoutHouseInput
  pictures: PictureUpdateManyInput
  contactInfoPayments: PaymentLanlordInfoUpdateManyWithoutHouseInput
}

input HouseUpdateWithWhereUniqueWithoutHostInput {
  where: HouseWhereUniqueInput!
  data: HouseUpdateWithoutHostDataInput!
}

input HouseUpsertNestedInput {
  update: HouseUpdateDataInput!
  create: HouseCreateInput!
}

input HouseUpsertWithoutAmenitiesInput {
  update: HouseUpdateWithoutAmenitiesDataInput!
  create: HouseCreateWithoutAmenitiesInput!
}

input HouseUpsertWithoutBookingsInput {
  update: HouseUpdateWithoutBookingsDataInput!
  create: HouseCreateWithoutBookingsInput!
}

input HouseUpsertWithoutContactInfoPaymentsInput {
  update: HouseUpdateWithoutContactInfoPaymentsDataInput!
  create: HouseCreateWithoutContactInfoPaymentsInput!
}

input HouseUpsertWithoutPricingInput {
  update: HouseUpdateWithoutPricingDataInput!
  create: HouseCreateWithoutPricingInput!
}

input HouseUpsertWithoutReviewsInput {
  update: HouseUpdateWithoutReviewsDataInput!
  create: HouseCreateWithoutReviewsInput!
}

input HouseUpsertWithoutRoomsInput {
  update: HouseUpdateWithoutRoomsDataInput!
  create: HouseCreateWithoutRoomsInput!
}

input HouseUpsertWithoutViewsInput {
  update: HouseUpdateWithoutViewsDataInput!
  create: HouseCreateWithoutViewsInput!
}

input HouseUpsertWithWhereUniqueWithoutHostInput {
  where: HouseWhereUniqueInput!
  update: HouseUpdateWithoutHostDataInput!
  create: HouseCreateWithoutHostInput!
}

input HouseWhereInput {
  """Logical AND on all given filters."""
  AND: [HouseWhereInput!]

  """Logical OR on all given filters."""
  OR: [HouseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HouseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  area: Int

  """All values that are not equal to given value."""
  area_not: Int

  """All values that are contained in given list."""
  area_in: [Int!]

  """All values that are not contained in given list."""
  area_not_in: [Int!]

  """All values less than the given value."""
  area_lt: Int

  """All values less than or equal the given value."""
  area_lte: Int

  """All values greater than the given value."""
  area_gt: Int

  """All values greater than or equal the given value."""
  area_gte: Int
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  shortDescription: String

  """All values that are not equal to given value."""
  shortDescription_not: String

  """All values that are contained in given list."""
  shortDescription_in: [String!]

  """All values that are not contained in given list."""
  shortDescription_not_in: [String!]

  """All values less than the given value."""
  shortDescription_lt: String

  """All values less than or equal the given value."""
  shortDescription_lte: String

  """All values greater than the given value."""
  shortDescription_gt: String

  """All values greater than or equal the given value."""
  shortDescription_gte: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values starting with the given string."""
  shortDescription_starts_with: String

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values not ending with the given string."""
  shortDescription_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  maxGuests: Int

  """All values that are not equal to given value."""
  maxGuests_not: Int

  """All values that are contained in given list."""
  maxGuests_in: [Int!]

  """All values that are not contained in given list."""
  maxGuests_not_in: [Int!]

  """All values less than the given value."""
  maxGuests_lt: Int

  """All values less than or equal the given value."""
  maxGuests_lte: Int

  """All values greater than the given value."""
  maxGuests_gt: Int

  """All values greater than or equal the given value."""
  maxGuests_gte: Int
  numBedrooms: Int

  """All values that are not equal to given value."""
  numBedrooms_not: Int

  """All values that are contained in given list."""
  numBedrooms_in: [Int!]

  """All values that are not contained in given list."""
  numBedrooms_not_in: [Int!]

  """All values less than the given value."""
  numBedrooms_lt: Int

  """All values less than or equal the given value."""
  numBedrooms_lte: Int

  """All values greater than the given value."""
  numBedrooms_gt: Int

  """All values greater than or equal the given value."""
  numBedrooms_gte: Int
  numBaths: Int

  """All values that are not equal to given value."""
  numBaths_not: Int

  """All values that are contained in given list."""
  numBaths_in: [Int!]

  """All values that are not contained in given list."""
  numBaths_not_in: [Int!]

  """All values less than the given value."""
  numBaths_lt: Int

  """All values less than or equal the given value."""
  numBaths_lte: Int

  """All values greater than the given value."""
  numBaths_gt: Int

  """All values greater than or equal the given value."""
  numBaths_gte: Int
  numLivingrooms: Int

  """All values that are not equal to given value."""
  numLivingrooms_not: Int

  """All values that are contained in given list."""
  numLivingrooms_in: [Int!]

  """All values that are not contained in given list."""
  numLivingrooms_not_in: [Int!]

  """All values less than the given value."""
  numLivingrooms_lt: Int

  """All values less than or equal the given value."""
  numLivingrooms_lte: Int

  """All values greater than the given value."""
  numLivingrooms_gt: Int

  """All values greater than or equal the given value."""
  numLivingrooms_gte: Int
  numDiningrooms: Int

  """All values that are not equal to given value."""
  numDiningrooms_not: Int

  """All values that are contained in given list."""
  numDiningrooms_in: [Int!]

  """All values that are not contained in given list."""
  numDiningrooms_not_in: [Int!]

  """All values less than the given value."""
  numDiningrooms_lt: Int

  """All values less than or equal the given value."""
  numDiningrooms_lte: Int

  """All values greater than the given value."""
  numDiningrooms_gt: Int

  """All values greater than or equal the given value."""
  numDiningrooms_gte: Int
  leaseType: HOUSE_LEASE_TYPE

  """All values that are not equal to given value."""
  leaseType_not: HOUSE_LEASE_TYPE

  """All values that are contained in given list."""
  leaseType_in: [HOUSE_LEASE_TYPE!]

  """All values that are not contained in given list."""
  leaseType_not_in: [HOUSE_LEASE_TYPE!]
  verified: Boolean

  """All values that are not equal to given value."""
  verified_not: Boolean
  type: HOUSE_TYPES

  """All values that are not equal to given value."""
  type_not: HOUSE_TYPES

  """All values that are contained in given list."""
  type_in: [HOUSE_TYPES!]

  """All values that are not contained in given list."""
  type_not_in: [HOUSE_TYPES!]
  residency: House_RESIDENCY

  """All values that are not equal to given value."""
  residency_not: House_RESIDENCY

  """All values that are contained in given list."""
  residency_in: [House_RESIDENCY!]

  """All values that are not contained in given list."""
  residency_not_in: [House_RESIDENCY!]
  lease: Int

  """All values that are not equal to given value."""
  lease_not: Int

  """All values that are contained in given list."""
  lease_in: [Int!]

  """All values that are not contained in given list."""
  lease_not_in: [Int!]

  """All values less than the given value."""
  lease_lt: Int

  """All values less than or equal the given value."""
  lease_lte: Int

  """All values greater than the given value."""
  lease_gt: Int

  """All values greater than or equal the given value."""
  lease_gte: Int
  popularity: Int

  """All values that are not equal to given value."""
  popularity_not: Int

  """All values that are contained in given list."""
  popularity_in: [Int!]

  """All values that are not contained in given list."""
  popularity_not_in: [Int!]

  """All values less than the given value."""
  popularity_lt: Int

  """All values less than or equal the given value."""
  popularity_lte: Int

  """All values greater than the given value."""
  popularity_gt: Int

  """All values greater than or equal the given value."""
  popularity_gte: Int
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  amenities: AmenitiesWhereInput
  host: UserWhereInput
  pricing: PricingWhereInput
  location: LocationWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  views: ViewsWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  pictures_every: PictureWhereInput
  pictures_some: PictureWhereInput
  pictures_none: PictureWhereInput
  contactInfoPayments_every: PaymentLanlordInfoWhereInput
  contactInfoPayments_some: PaymentLanlordInfoWhereInput
  contactInfoPayments_none: PaymentLanlordInfoWhereInput
}

input HouseWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  lat: Float
  lng: Float
  address: String
  commune: Commune
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  lat: Float
  lng: Float
  address: String
  commune: CommuneCreateOneInput
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  address_ASC
  address_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  lat: Float
  lng: Float
  address: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  lat: Float
  lng: Float
  address: String
  commune: CommuneUpdateOneInput
}

input LocationUpdateInput {
  lat: Float
  lng: Float
  address: String
  commune: CommuneUpdateOneInput
}

input LocationUpdateManyMutationInput {
  lat: Float
  lng: Float
  address: String
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpdateOneRequiredInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lng: Float

  """All values that are not equal to given value."""
  lng_not: Float

  """All values that are contained in given list."""
  lng_in: [Float!]

  """All values that are not contained in given list."""
  lng_not_in: [Float!]

  """All values less than the given value."""
  lng_lt: Float

  """All values less than or equal the given value."""
  lng_lte: Float

  """All values greater than the given value."""
  lng_gt: Float

  """All values greater than or equal the given value."""
  lng_gte: Float
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  commune: CommuneWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRoom(data: RoomCreateInput!): Room!
  createPricing(data: PricingCreateInput!): Pricing!
  createViews(data: ViewsCreateInput!): Views!
  createAmenities(data: AmenitiesCreateInput!): Amenities!
  createReview(data: ReviewCreateInput!): Review!
  createBooking(data: BookingCreateInput!): Booking!
  createHouse_Favorited(data: House_FavoritedCreateInput!): House_Favorited!
  createNegotiation(data: NegotiationCreateInput!): Negotiation!
  createPaymentHouse(data: PaymentHouseCreateInput!): PaymentHouse!
  createPaymentAccount(data: PaymentAccountCreateInput!): PaymentAccount!
  createPaypalInformation(data: PaypalInformationCreateInput!): PaypalInformation!
  createCreditCardInformation(data: CreditCardInformationCreateInput!): CreditCardInformation!
  createPaymentLanlordInfo(data: PaymentLanlordInfoCreateInput!): PaymentLanlordInfo!
  createNotification(data: NotificationCreateInput!): Notification!
  createLocation(data: LocationCreateInput!): Location!
  createCommune(data: CommuneCreateInput!): Commune!
  createCountry(data: CountryCreateInput!): Country!
  createState(data: StateCreateInput!): State!
  createUser(data: UserCreateInput!): User!
  createHouse(data: HouseCreateInput!): House!
  createVideo(data: VideoCreateInput!): Video!
  createPicture(data: PictureCreateInput!): Picture!
  createCity(data: CityCreateInput!): City!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updatePricing(data: PricingUpdateInput!, where: PricingWhereUniqueInput!): Pricing
  updateViews(data: ViewsUpdateInput!, where: ViewsWhereUniqueInput!): Views
  updateAmenities(data: AmenitiesUpdateInput!, where: AmenitiesWhereUniqueInput!): Amenities
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateHouse_Favorited(data: House_FavoritedUpdateInput!, where: House_FavoritedWhereUniqueInput!): House_Favorited
  updateNegotiation(data: NegotiationUpdateInput!, where: NegotiationWhereUniqueInput!): Negotiation
  updatePaymentHouse(data: PaymentHouseUpdateInput!, where: PaymentHouseWhereUniqueInput!): PaymentHouse
  updatePaymentAccount(data: PaymentAccountUpdateInput!, where: PaymentAccountWhereUniqueInput!): PaymentAccount
  updatePaypalInformation(data: PaypalInformationUpdateInput!, where: PaypalInformationWhereUniqueInput!): PaypalInformation
  updateCreditCardInformation(data: CreditCardInformationUpdateInput!, where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  updatePaymentLanlordInfo(data: PaymentLanlordInfoUpdateInput!, where: PaymentLanlordInfoWhereUniqueInput!): PaymentLanlordInfo
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateCommune(data: CommuneUpdateInput!, where: CommuneWhereUniqueInput!): Commune
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateHouse(data: HouseUpdateInput!, where: HouseWhereUniqueInput!): House
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updatePicture(data: PictureUpdateInput!, where: PictureWhereUniqueInput!): Picture
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deleteViews(where: ViewsWhereUniqueInput!): Views
  deleteAmenities(where: AmenitiesWhereUniqueInput!): Amenities
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteHouse_Favorited(where: House_FavoritedWhereUniqueInput!): House_Favorited
  deleteNegotiation(where: NegotiationWhereUniqueInput!): Negotiation
  deletePaymentHouse(where: PaymentHouseWhereUniqueInput!): PaymentHouse
  deletePaymentAccount(where: PaymentAccountWhereUniqueInput!): PaymentAccount
  deletePaypalInformation(where: PaypalInformationWhereUniqueInput!): PaypalInformation
  deleteCreditCardInformation(where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  deletePaymentLanlordInfo(where: PaymentLanlordInfoWhereUniqueInput!): PaymentLanlordInfo
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteCommune(where: CommuneWhereUniqueInput!): Commune
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteState(where: StateWhereUniqueInput!): State
  deleteUser(where: UserWhereUniqueInput!): User
  deleteHouse(where: HouseWhereUniqueInput!): House
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deletePicture(where: PictureWhereUniqueInput!): Picture
  deleteCity(where: CityWhereUniqueInput!): City
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  upsertPricing(where: PricingWhereUniqueInput!, create: PricingCreateInput!, update: PricingUpdateInput!): Pricing!
  upsertViews(where: ViewsWhereUniqueInput!, create: ViewsCreateInput!, update: ViewsUpdateInput!): Views!
  upsertAmenities(where: AmenitiesWhereUniqueInput!, create: AmenitiesCreateInput!, update: AmenitiesUpdateInput!): Amenities!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  upsertHouse_Favorited(where: House_FavoritedWhereUniqueInput!, create: House_FavoritedCreateInput!, update: House_FavoritedUpdateInput!): House_Favorited!
  upsertNegotiation(where: NegotiationWhereUniqueInput!, create: NegotiationCreateInput!, update: NegotiationUpdateInput!): Negotiation!
  upsertPaymentHouse(where: PaymentHouseWhereUniqueInput!, create: PaymentHouseCreateInput!, update: PaymentHouseUpdateInput!): PaymentHouse!
  upsertPaymentAccount(where: PaymentAccountWhereUniqueInput!, create: PaymentAccountCreateInput!, update: PaymentAccountUpdateInput!): PaymentAccount!
  upsertPaypalInformation(where: PaypalInformationWhereUniqueInput!, create: PaypalInformationCreateInput!, update: PaypalInformationUpdateInput!): PaypalInformation!
  upsertCreditCardInformation(where: CreditCardInformationWhereUniqueInput!, create: CreditCardInformationCreateInput!, update: CreditCardInformationUpdateInput!): CreditCardInformation!
  upsertPaymentLanlordInfo(where: PaymentLanlordInfoWhereUniqueInput!, create: PaymentLanlordInfoCreateInput!, update: PaymentLanlordInfoUpdateInput!): PaymentLanlordInfo!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertCommune(where: CommuneWhereUniqueInput!, create: CommuneCreateInput!, update: CommuneUpdateInput!): Commune!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertHouse(where: HouseWhereUniqueInput!, create: HouseCreateInput!, update: HouseUpdateInput!): House!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  upsertPicture(where: PictureWhereUniqueInput!, create: PictureCreateInput!, update: PictureUpdateInput!): Picture!
  upsertCity(where: CityWhereUniqueInput!, create: CityCreateInput!, update: CityUpdateInput!): City!
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  updateManyPricings(data: PricingUpdateManyMutationInput!, where: PricingWhereInput): BatchPayload!
  updateManyViewses(data: ViewsUpdateManyMutationInput!, where: ViewsWhereInput): BatchPayload!
  updateManyAmenitieses(data: AmenitiesUpdateManyMutationInput!, where: AmenitiesWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  updateManyNegotiations(data: NegotiationUpdateManyMutationInput!, where: NegotiationWhereInput): BatchPayload!
  updateManyPaymentHouses(data: PaymentHouseUpdateManyMutationInput!, where: PaymentHouseWhereInput): BatchPayload!
  updateManyPaymentAccounts(data: PaymentAccountUpdateManyMutationInput!, where: PaymentAccountWhereInput): BatchPayload!
  updateManyPaypalInformations(data: PaypalInformationUpdateManyMutationInput!, where: PaypalInformationWhereInput): BatchPayload!
  updateManyCreditCardInformations(data: CreditCardInformationUpdateManyMutationInput!, where: CreditCardInformationWhereInput): BatchPayload!
  updateManyPaymentLanlordInfoes(data: PaymentLanlordInfoUpdateManyMutationInput!, where: PaymentLanlordInfoWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyCommunes(data: CommuneUpdateManyMutationInput!, where: CommuneWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyStates(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyHouses(data: HouseUpdateManyMutationInput!, where: HouseWhereInput): BatchPayload!
  updateManyVideos(data: VideoUpdateManyMutationInput!, where: VideoWhereInput): BatchPayload!
  updateManyPictures(data: PictureUpdateManyMutationInput!, where: PictureWhereInput): BatchPayload!
  updateManyCities(data: CityUpdateManyMutationInput!, where: CityWhereInput): BatchPayload!
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  deleteManyPricings(where: PricingWhereInput): BatchPayload!
  deleteManyViewses(where: ViewsWhereInput): BatchPayload!
  deleteManyAmenitieses(where: AmenitiesWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  deleteManyHouse_Favoriteds(where: House_FavoritedWhereInput): BatchPayload!
  deleteManyNegotiations(where: NegotiationWhereInput): BatchPayload!
  deleteManyPaymentHouses(where: PaymentHouseWhereInput): BatchPayload!
  deleteManyPaymentAccounts(where: PaymentAccountWhereInput): BatchPayload!
  deleteManyPaypalInformations(where: PaypalInformationWhereInput): BatchPayload!
  deleteManyCreditCardInformations(where: CreditCardInformationWhereInput): BatchPayload!
  deleteManyPaymentLanlordInfoes(where: PaymentLanlordInfoWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyCommunes(where: CommuneWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyStates(where: StateWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyHouses(where: HouseWhereInput): BatchPayload!
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
  deleteManyPictures(where: PictureWhereInput): BatchPayload!
  deleteManyCities(where: CityWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Negotiation implements Node {
  id: ID!
  createdAt: DateTime!
  negotiator: User!
  House: House!
  offer: Float!
  status: NEGOTIATION_TYPE
}

enum NEGOTIATION_TYPE {
  PENDING
  ACCEPTED
  REFUSED
}

"""A connection to a list of items."""
type NegotiationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NegotiationEdge]!
  aggregate: AggregateNegotiation!
}

input NegotiationCreateInput {
  offer: Float!
  status: NEGOTIATION_TYPE
  negotiator: UserCreateOneInput!
  House: HouseCreateOneInput!
}

"""An edge in a connection."""
type NegotiationEdge {
  """The item at the end of the edge."""
  node: Negotiation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NegotiationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  offer_ASC
  offer_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NegotiationPreviousValues {
  id: ID!
  createdAt: DateTime!
  offer: Float!
  status: NEGOTIATION_TYPE
}

type NegotiationSubscriptionPayload {
  mutation: MutationType!
  node: Negotiation
  updatedFields: [String!]
  previousValues: NegotiationPreviousValues
}

input NegotiationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NegotiationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NegotiationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NegotiationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NegotiationWhereInput
}

input NegotiationUpdateInput {
  offer: Float
  status: NEGOTIATION_TYPE
  negotiator: UserUpdateOneRequiredInput
  House: HouseUpdateOneRequiredInput
}

input NegotiationUpdateManyMutationInput {
  offer: Float
  status: NEGOTIATION_TYPE
}

input NegotiationWhereInput {
  """Logical AND on all given filters."""
  AND: [NegotiationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NegotiationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NegotiationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  offer: Float

  """All values that are not equal to given value."""
  offer_not: Float

  """All values that are contained in given list."""
  offer_in: [Float!]

  """All values that are not contained in given list."""
  offer_not_in: [Float!]

  """All values less than the given value."""
  offer_lt: Float

  """All values less than or equal the given value."""
  offer_lte: Float

  """All values greater than the given value."""
  offer_gt: Float

  """All values greater than or equal the given value."""
  offer_gte: Float
  status: NEGOTIATION_TYPE

  """All values that are not equal to given value."""
  status_not: NEGOTIATION_TYPE

  """All values that are contained in given list."""
  status_in: [NEGOTIATION_TYPE!]

  """All values that are not contained in given list."""
  status_not_in: [NEGOTIATION_TYPE!]
  negotiator: UserWhereInput
  House: HouseWhereInput
}

input NegotiationWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  user: User!
  link: String!
  readDate: DateTime!
}

enum NOTIFICATION_TYPE {
  OFFER
  INSTANT_BOOK
  RESPONSIVENESS
  NEW_AMENITIES
  HOUSE_RULES
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
  user: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  link_ASC
  link_DESC
  readDate_ASC
  readDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
}

input NotificationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: NOTIFICATION_TYPE

  """All values that are not equal to given value."""
  type_not: NOTIFICATION_TYPE

  """All values that are contained in given list."""
  type_in: [NOTIFICATION_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [NOTIFICATION_TYPE!]
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  readDate: DateTime

  """All values that are not equal to given value."""
  readDate_not: DateTime

  """All values that are contained in given list."""
  readDate_in: [DateTime!]

  """All values that are not contained in given list."""
  readDate_not_in: [DateTime!]

  """All values less than the given value."""
  readDate_lt: DateTime

  """All values less than or equal the given value."""
  readDate_lte: DateTime

  """All values greater than the given value."""
  readDate_gt: DateTime

  """All values greater than or equal the given value."""
  readDate_gte: DateTime
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
  user: UserUpdateOneRequiredWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateManyMutationInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  deleteMany: [NotificationScalarWhereInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutUserDataInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: NOTIFICATION_TYPE

  """All values that are not equal to given value."""
  type_not: NOTIFICATION_TYPE

  """All values that are contained in given list."""
  type_in: [NOTIFICATION_TYPE!]

  """All values that are not contained in given list."""
  type_not_in: [NOTIFICATION_TYPE!]
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  readDate: DateTime

  """All values that are not equal to given value."""
  readDate_not: DateTime

  """All values that are contained in given list."""
  readDate_in: [DateTime!]

  """All values that are not contained in given list."""
  readDate_not_in: [DateTime!]

  """All values less than the given value."""
  readDate_lt: DateTime

  """All values less than or equal the given value."""
  readDate_lte: DateTime

  """All values greater than the given value."""
  readDate_gt: DateTime

  """All values greater than or equal the given value."""
  readDate_gte: DateTime
  user: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PAYMENT_PROVIDER {
  PAYPAL
  CREDIT_CARD
}

type PaymentAccount implements Node {
  id: ID!
  createdAt: DateTime!
  type: PAYMENT_PROVIDER
  user: User!
  payments(where: PaymentHouseWhereInput, orderBy: PaymentHouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentHouse!]
  paypal: PaypalInformation
  creditcard: CreditCardInformation
}

"""A connection to a list of items."""
type PaymentAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentAccountEdge]!
  aggregate: AggregatePaymentAccount!
}

input PaymentAccountCreateInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneInput!
  payments: PaymentHouseCreateManyWithoutPaymentMethodInput
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateOneWithoutCreditcardInput {
  create: PaymentAccountCreateWithoutCreditcardInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateOneWithoutPaymentsInput {
  create: PaymentAccountCreateWithoutPaymentsInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateOneWithoutPaypalInput {
  create: PaymentAccountCreateWithoutPaypalInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateWithoutCreditcardInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneInput!
  payments: PaymentHouseCreateManyWithoutPaymentMethodInput
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateWithoutPaymentsInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneInput!
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateWithoutPaypalInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneInput!
  payments: PaymentHouseCreateManyWithoutPaymentMethodInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

"""An edge in a connection."""
type PaymentAccountEdge {
  """The item at the end of the edge."""
  node: PaymentAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentAccountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentAccountPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: PAYMENT_PROVIDER
}

type PaymentAccountSubscriptionPayload {
  mutation: MutationType!
  node: PaymentAccount
  updatedFields: [String!]
  previousValues: PaymentAccountPreviousValues
}

input PaymentAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentAccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentAccountWhereInput
}

input PaymentAccountUpdateInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneRequiredInput
  payments: PaymentHouseUpdateManyWithoutPaymentMethodInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateManyMutationInput {
  type: PAYMENT_PROVIDER
}

input PaymentAccountUpdateOneRequiredWithoutPaymentsInput {
  create: PaymentAccountCreateWithoutPaymentsInput
  connect: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaymentsDataInput
  upsert: PaymentAccountUpsertWithoutPaymentsInput
}

input PaymentAccountUpdateOneRequiredWithoutPaypalInput {
  create: PaymentAccountCreateWithoutPaypalInput
  connect: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaypalDataInput
  upsert: PaymentAccountUpsertWithoutPaypalInput
}

input PaymentAccountUpdateOneWithoutCreditcardInput {
  create: PaymentAccountCreateWithoutCreditcardInput
  connect: PaymentAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentAccountUpdateWithoutCreditcardDataInput
  upsert: PaymentAccountUpsertWithoutCreditcardInput
}

input PaymentAccountUpdateWithoutCreditcardDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneRequiredInput
  payments: PaymentHouseUpdateManyWithoutPaymentMethodInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutPaymentsDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneRequiredInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutPaypalDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneRequiredInput
  payments: PaymentHouseUpdateManyWithoutPaymentMethodInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpsertWithoutCreditcardInput {
  update: PaymentAccountUpdateWithoutCreditcardDataInput!
  create: PaymentAccountCreateWithoutCreditcardInput!
}

input PaymentAccountUpsertWithoutPaymentsInput {
  update: PaymentAccountUpdateWithoutPaymentsDataInput!
  create: PaymentAccountCreateWithoutPaymentsInput!
}

input PaymentAccountUpsertWithoutPaypalInput {
  update: PaymentAccountUpdateWithoutPaypalDataInput!
  create: PaymentAccountCreateWithoutPaypalInput!
}

input PaymentAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: PAYMENT_PROVIDER

  """All values that are not equal to given value."""
  type_not: PAYMENT_PROVIDER

  """All values that are contained in given list."""
  type_in: [PAYMENT_PROVIDER!]

  """All values that are not contained in given list."""
  type_not_in: [PAYMENT_PROVIDER!]
  user: UserWhereInput
  payments_every: PaymentHouseWhereInput
  payments_some: PaymentHouseWhereInput
  payments_none: PaymentHouseWhereInput
  paypal: PaypalInformationWhereInput
  creditcard: CreditCardInformationWhereInput
}

input PaymentAccountWhereUniqueInput {
  id: ID
}

type PaymentHouse implements Node {
  id: ID!
  createdAt: DateTime!
  totalPrice: Float!
  booking: Booking!
  paymentMethod: PaymentAccount!
}

"""A connection to a list of items."""
type PaymentHouseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentHouseEdge]!
  aggregate: AggregatePaymentHouse!
}

input PaymentHouseCreateInput {
  totalPrice: Float!
  booking: BookingCreateOneWithoutPaymentInput!
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput!
}

input PaymentHouseCreateManyWithoutPaymentMethodInput {
  create: [PaymentHouseCreateWithoutPaymentMethodInput!]
  connect: [PaymentHouseWhereUniqueInput!]
}

input PaymentHouseCreateOneWithoutBookingInput {
  create: PaymentHouseCreateWithoutBookingInput
  connect: PaymentHouseWhereUniqueInput
}

input PaymentHouseCreateWithoutBookingInput {
  totalPrice: Float!
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput!
}

input PaymentHouseCreateWithoutPaymentMethodInput {
  totalPrice: Float!
  booking: BookingCreateOneWithoutPaymentInput!
}

"""An edge in a connection."""
type PaymentHouseEdge {
  """The item at the end of the edge."""
  node: PaymentHouse!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentHouseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentHousePreviousValues {
  id: ID!
  createdAt: DateTime!
  totalPrice: Float!
}

input PaymentHouseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentHouseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentHouseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentHouseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalPrice: Float

  """All values that are not equal to given value."""
  totalPrice_not: Float

  """All values that are contained in given list."""
  totalPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Float!]

  """All values less than the given value."""
  totalPrice_lt: Float

  """All values less than or equal the given value."""
  totalPrice_lte: Float

  """All values greater than the given value."""
  totalPrice_gt: Float

  """All values greater than or equal the given value."""
  totalPrice_gte: Float
}

type PaymentHouseSubscriptionPayload {
  mutation: MutationType!
  node: PaymentHouse
  updatedFields: [String!]
  previousValues: PaymentHousePreviousValues
}

input PaymentHouseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentHouseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentHouseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentHouseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentHouseWhereInput
}

input PaymentHouseUpdateInput {
  totalPrice: Float
  booking: BookingUpdateOneRequiredWithoutPaymentInput
  paymentMethod: PaymentAccountUpdateOneRequiredWithoutPaymentsInput
}

input PaymentHouseUpdateManyDataInput {
  totalPrice: Float
}

input PaymentHouseUpdateManyMutationInput {
  totalPrice: Float
}

input PaymentHouseUpdateManyWithoutPaymentMethodInput {
  create: [PaymentHouseCreateWithoutPaymentMethodInput!]
  connect: [PaymentHouseWhereUniqueInput!]
  disconnect: [PaymentHouseWhereUniqueInput!]
  delete: [PaymentHouseWhereUniqueInput!]
  update: [PaymentHouseUpdateWithWhereUniqueWithoutPaymentMethodInput!]
  updateMany: [PaymentHouseUpdateManyWithWhereNestedInput!]
  deleteMany: [PaymentHouseScalarWhereInput!]
  upsert: [PaymentHouseUpsertWithWhereUniqueWithoutPaymentMethodInput!]
}

input PaymentHouseUpdateManyWithWhereNestedInput {
  where: PaymentHouseScalarWhereInput!
  data: PaymentHouseUpdateManyDataInput!
}

input PaymentHouseUpdateOneRequiredWithoutBookingInput {
  create: PaymentHouseCreateWithoutBookingInput
  connect: PaymentHouseWhereUniqueInput
  update: PaymentHouseUpdateWithoutBookingDataInput
  upsert: PaymentHouseUpsertWithoutBookingInput
}

input PaymentHouseUpdateWithoutBookingDataInput {
  totalPrice: Float
  paymentMethod: PaymentAccountUpdateOneRequiredWithoutPaymentsInput
}

input PaymentHouseUpdateWithoutPaymentMethodDataInput {
  totalPrice: Float
  booking: BookingUpdateOneRequiredWithoutPaymentInput
}

input PaymentHouseUpdateWithWhereUniqueWithoutPaymentMethodInput {
  where: PaymentHouseWhereUniqueInput!
  data: PaymentHouseUpdateWithoutPaymentMethodDataInput!
}

input PaymentHouseUpsertWithoutBookingInput {
  update: PaymentHouseUpdateWithoutBookingDataInput!
  create: PaymentHouseCreateWithoutBookingInput!
}

input PaymentHouseUpsertWithWhereUniqueWithoutPaymentMethodInput {
  where: PaymentHouseWhereUniqueInput!
  update: PaymentHouseUpdateWithoutPaymentMethodDataInput!
  create: PaymentHouseCreateWithoutPaymentMethodInput!
}

input PaymentHouseWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentHouseWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentHouseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentHouseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalPrice: Float

  """All values that are not equal to given value."""
  totalPrice_not: Float

  """All values that are contained in given list."""
  totalPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Float!]

  """All values less than the given value."""
  totalPrice_lt: Float

  """All values less than or equal the given value."""
  totalPrice_lte: Float

  """All values greater than the given value."""
  totalPrice_gt: Float

  """All values greater than or equal the given value."""
  totalPrice_gte: Float
  booking: BookingWhereInput
  paymentMethod: PaymentAccountWhereInput
}

input PaymentHouseWhereUniqueInput {
  id: ID
}

type PaymentLanlordInfo implements Node {
  id: ID!
  createdAt: DateTime!
  totalPrice: Float!
  client: User!
  House: House!
  moncashTransactId: String!
}

"""A connection to a list of items."""
type PaymentLanlordInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentLanlordInfoEdge]!
  aggregate: AggregatePaymentLanlordInfo!
}

input PaymentLanlordInfoCreateInput {
  totalPrice: Float!
  moncashTransactId: String!
  client: UserCreateOneWithoutPaidContactsInput!
  House: HouseCreateOneWithoutContactInfoPaymentsInput!
}

input PaymentLanlordInfoCreateManyWithoutClientInput {
  create: [PaymentLanlordInfoCreateWithoutClientInput!]
  connect: [PaymentLanlordInfoWhereUniqueInput!]
}

input PaymentLanlordInfoCreateManyWithoutHouseInput {
  create: [PaymentLanlordInfoCreateWithoutHouseInput!]
  connect: [PaymentLanlordInfoWhereUniqueInput!]
}

input PaymentLanlordInfoCreateWithoutClientInput {
  totalPrice: Float!
  moncashTransactId: String!
  House: HouseCreateOneWithoutContactInfoPaymentsInput!
}

input PaymentLanlordInfoCreateWithoutHouseInput {
  totalPrice: Float!
  moncashTransactId: String!
  client: UserCreateOneWithoutPaidContactsInput!
}

"""An edge in a connection."""
type PaymentLanlordInfoEdge {
  """The item at the end of the edge."""
  node: PaymentLanlordInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentLanlordInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  totalPrice_ASC
  totalPrice_DESC
  moncashTransactId_ASC
  moncashTransactId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentLanlordInfoPreviousValues {
  id: ID!
  createdAt: DateTime!
  totalPrice: Float!
  moncashTransactId: String!
}

input PaymentLanlordInfoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentLanlordInfoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentLanlordInfoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentLanlordInfoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalPrice: Float

  """All values that are not equal to given value."""
  totalPrice_not: Float

  """All values that are contained in given list."""
  totalPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Float!]

  """All values less than the given value."""
  totalPrice_lt: Float

  """All values less than or equal the given value."""
  totalPrice_lte: Float

  """All values greater than the given value."""
  totalPrice_gt: Float

  """All values greater than or equal the given value."""
  totalPrice_gte: Float
  moncashTransactId: String

  """All values that are not equal to given value."""
  moncashTransactId_not: String

  """All values that are contained in given list."""
  moncashTransactId_in: [String!]

  """All values that are not contained in given list."""
  moncashTransactId_not_in: [String!]

  """All values less than the given value."""
  moncashTransactId_lt: String

  """All values less than or equal the given value."""
  moncashTransactId_lte: String

  """All values greater than the given value."""
  moncashTransactId_gt: String

  """All values greater than or equal the given value."""
  moncashTransactId_gte: String

  """All values containing the given string."""
  moncashTransactId_contains: String

  """All values not containing the given string."""
  moncashTransactId_not_contains: String

  """All values starting with the given string."""
  moncashTransactId_starts_with: String

  """All values not starting with the given string."""
  moncashTransactId_not_starts_with: String

  """All values ending with the given string."""
  moncashTransactId_ends_with: String

  """All values not ending with the given string."""
  moncashTransactId_not_ends_with: String
}

type PaymentLanlordInfoSubscriptionPayload {
  mutation: MutationType!
  node: PaymentLanlordInfo
  updatedFields: [String!]
  previousValues: PaymentLanlordInfoPreviousValues
}

input PaymentLanlordInfoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentLanlordInfoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentLanlordInfoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentLanlordInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentLanlordInfoWhereInput
}

input PaymentLanlordInfoUpdateInput {
  totalPrice: Float
  moncashTransactId: String
  client: UserUpdateOneRequiredWithoutPaidContactsInput
  House: HouseUpdateOneRequiredWithoutContactInfoPaymentsInput
}

input PaymentLanlordInfoUpdateManyDataInput {
  totalPrice: Float
  moncashTransactId: String
}

input PaymentLanlordInfoUpdateManyMutationInput {
  totalPrice: Float
  moncashTransactId: String
}

input PaymentLanlordInfoUpdateManyWithoutClientInput {
  create: [PaymentLanlordInfoCreateWithoutClientInput!]
  connect: [PaymentLanlordInfoWhereUniqueInput!]
  disconnect: [PaymentLanlordInfoWhereUniqueInput!]
  delete: [PaymentLanlordInfoWhereUniqueInput!]
  update: [PaymentLanlordInfoUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [PaymentLanlordInfoUpdateManyWithWhereNestedInput!]
  deleteMany: [PaymentLanlordInfoScalarWhereInput!]
  upsert: [PaymentLanlordInfoUpsertWithWhereUniqueWithoutClientInput!]
}

input PaymentLanlordInfoUpdateManyWithoutHouseInput {
  create: [PaymentLanlordInfoCreateWithoutHouseInput!]
  connect: [PaymentLanlordInfoWhereUniqueInput!]
  disconnect: [PaymentLanlordInfoWhereUniqueInput!]
  delete: [PaymentLanlordInfoWhereUniqueInput!]
  update: [PaymentLanlordInfoUpdateWithWhereUniqueWithoutHouseInput!]
  updateMany: [PaymentLanlordInfoUpdateManyWithWhereNestedInput!]
  deleteMany: [PaymentLanlordInfoScalarWhereInput!]
  upsert: [PaymentLanlordInfoUpsertWithWhereUniqueWithoutHouseInput!]
}

input PaymentLanlordInfoUpdateManyWithWhereNestedInput {
  where: PaymentLanlordInfoScalarWhereInput!
  data: PaymentLanlordInfoUpdateManyDataInput!
}

input PaymentLanlordInfoUpdateWithoutClientDataInput {
  totalPrice: Float
  moncashTransactId: String
  House: HouseUpdateOneRequiredWithoutContactInfoPaymentsInput
}

input PaymentLanlordInfoUpdateWithoutHouseDataInput {
  totalPrice: Float
  moncashTransactId: String
  client: UserUpdateOneRequiredWithoutPaidContactsInput
}

input PaymentLanlordInfoUpdateWithWhereUniqueWithoutClientInput {
  where: PaymentLanlordInfoWhereUniqueInput!
  data: PaymentLanlordInfoUpdateWithoutClientDataInput!
}

input PaymentLanlordInfoUpdateWithWhereUniqueWithoutHouseInput {
  where: PaymentLanlordInfoWhereUniqueInput!
  data: PaymentLanlordInfoUpdateWithoutHouseDataInput!
}

input PaymentLanlordInfoUpsertWithWhereUniqueWithoutClientInput {
  where: PaymentLanlordInfoWhereUniqueInput!
  update: PaymentLanlordInfoUpdateWithoutClientDataInput!
  create: PaymentLanlordInfoCreateWithoutClientInput!
}

input PaymentLanlordInfoUpsertWithWhereUniqueWithoutHouseInput {
  where: PaymentLanlordInfoWhereUniqueInput!
  update: PaymentLanlordInfoUpdateWithoutHouseDataInput!
  create: PaymentLanlordInfoCreateWithoutHouseInput!
}

input PaymentLanlordInfoWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentLanlordInfoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentLanlordInfoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentLanlordInfoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  totalPrice: Float

  """All values that are not equal to given value."""
  totalPrice_not: Float

  """All values that are contained in given list."""
  totalPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Float!]

  """All values less than the given value."""
  totalPrice_lt: Float

  """All values less than or equal the given value."""
  totalPrice_lte: Float

  """All values greater than the given value."""
  totalPrice_gt: Float

  """All values greater than or equal the given value."""
  totalPrice_gte: Float
  moncashTransactId: String

  """All values that are not equal to given value."""
  moncashTransactId_not: String

  """All values that are contained in given list."""
  moncashTransactId_in: [String!]

  """All values that are not contained in given list."""
  moncashTransactId_not_in: [String!]

  """All values less than the given value."""
  moncashTransactId_lt: String

  """All values less than or equal the given value."""
  moncashTransactId_lte: String

  """All values greater than the given value."""
  moncashTransactId_gt: String

  """All values greater than or equal the given value."""
  moncashTransactId_gte: String

  """All values containing the given string."""
  moncashTransactId_contains: String

  """All values not containing the given string."""
  moncashTransactId_not_contains: String

  """All values starting with the given string."""
  moncashTransactId_starts_with: String

  """All values not starting with the given string."""
  moncashTransactId_not_starts_with: String

  """All values ending with the given string."""
  moncashTransactId_ends_with: String

  """All values not ending with the given string."""
  moncashTransactId_not_ends_with: String
  client: UserWhereInput
  House: HouseWhereInput
}

input PaymentLanlordInfoWhereUniqueInput {
  id: ID
}

type PaypalInformation implements Node {
  id: ID!
  createdAt: DateTime!
  email: String!
  paymentAccount: PaymentAccount!
}

"""A connection to a list of items."""
type PaypalInformationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaypalInformationEdge]!
  aggregate: AggregatePaypalInformation!
}

input PaypalInformationCreateInput {
  email: String!
  paymentAccount: PaymentAccountCreateOneWithoutPaypalInput!
}

input PaypalInformationCreateOneWithoutPaymentAccountInput {
  create: PaypalInformationCreateWithoutPaymentAccountInput
  connect: PaypalInformationWhereUniqueInput
}

input PaypalInformationCreateWithoutPaymentAccountInput {
  email: String!
}

"""An edge in a connection."""
type PaypalInformationEdge {
  """The item at the end of the edge."""
  node: PaypalInformation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaypalInformationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaypalInformationPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
}

type PaypalInformationSubscriptionPayload {
  mutation: MutationType!
  node: PaypalInformation
  updatedFields: [String!]
  previousValues: PaypalInformationPreviousValues
}

input PaypalInformationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaypalInformationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaypalInformationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaypalInformationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaypalInformationWhereInput
}

input PaypalInformationUpdateInput {
  email: String
  paymentAccount: PaymentAccountUpdateOneRequiredWithoutPaypalInput
}

input PaypalInformationUpdateManyMutationInput {
  email: String
}

input PaypalInformationUpdateOneWithoutPaymentAccountInput {
  create: PaypalInformationCreateWithoutPaymentAccountInput
  connect: PaypalInformationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaypalInformationUpdateWithoutPaymentAccountDataInput
  upsert: PaypalInformationUpsertWithoutPaymentAccountInput
}

input PaypalInformationUpdateWithoutPaymentAccountDataInput {
  email: String
}

input PaypalInformationUpsertWithoutPaymentAccountInput {
  update: PaypalInformationUpdateWithoutPaymentAccountDataInput!
  create: PaypalInformationCreateWithoutPaymentAccountInput!
}

input PaypalInformationWhereInput {
  """Logical AND on all given filters."""
  AND: [PaypalInformationWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaypalInformationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaypalInformationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  paymentAccount: PaymentAccountWhereInput
}

input PaypalInformationWhereUniqueInput {
  id: ID
}

type Picture implements Node {
  id: ID!
  url: String!
}

"""A connection to a list of items."""
type PictureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PictureEdge]!
  aggregate: AggregatePicture!
}

input PictureCreateInput {
  url: String!
}

input PictureCreateManyInput {
  create: [PictureCreateInput!]
  connect: [PictureWhereUniqueInput!]
}

input PictureCreateOneInput {
  create: PictureCreateInput
  connect: PictureWhereUniqueInput
}

"""An edge in a connection."""
type PictureEdge {
  """The item at the end of the edge."""
  node: Picture!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PictureOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PicturePreviousValues {
  id: ID!
  url: String!
}

input PictureScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PictureScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PictureScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PictureScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type PictureSubscriptionPayload {
  mutation: MutationType!
  node: Picture
  updatedFields: [String!]
  previousValues: PicturePreviousValues
}

input PictureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PictureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PictureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PictureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PictureWhereInput
}

input PictureUpdateDataInput {
  url: String
}

input PictureUpdateInput {
  url: String
}

input PictureUpdateManyDataInput {
  url: String
}

input PictureUpdateManyInput {
  create: [PictureCreateInput!]
  connect: [PictureWhereUniqueInput!]
  disconnect: [PictureWhereUniqueInput!]
  delete: [PictureWhereUniqueInput!]
  update: [PictureUpdateWithWhereUniqueNestedInput!]
  updateMany: [PictureUpdateManyWithWhereNestedInput!]
  deleteMany: [PictureScalarWhereInput!]
  upsert: [PictureUpsertWithWhereUniqueNestedInput!]
}

input PictureUpdateManyMutationInput {
  url: String
}

input PictureUpdateManyWithWhereNestedInput {
  where: PictureScalarWhereInput!
  data: PictureUpdateManyDataInput!
}

input PictureUpdateOneInput {
  create: PictureCreateInput
  connect: PictureWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PictureUpdateDataInput
  upsert: PictureUpsertNestedInput
}

input PictureUpdateWithWhereUniqueNestedInput {
  where: PictureWhereUniqueInput!
  data: PictureUpdateDataInput!
}

input PictureUpsertNestedInput {
  update: PictureUpdateDataInput!
  create: PictureCreateInput!
}

input PictureUpsertWithWhereUniqueNestedInput {
  where: PictureWhereUniqueInput!
  update: PictureUpdateDataInput!
  create: PictureCreateInput!
}

input PictureWhereInput {
  """Logical AND on all given filters."""
  AND: [PictureWhereInput!]

  """Logical OR on all given filters."""
  OR: [PictureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PictureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input PictureWhereUniqueInput {
  id: ID
}

type Pricing implements Node {
  id: ID!
  House: House!
  basePrice: Float
  highestPrice: Float!
  currency: CURRENCY!
  income: Float
}

"""A connection to a list of items."""
type PricingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PricingEdge]!
  aggregate: AggregatePricing!
}

input PricingCreateInput {
  basePrice: Float
  highestPrice: Float!
  currency: CURRENCY!
  income: Float
  House: HouseCreateOneWithoutPricingInput!
}

input PricingCreateOneWithoutHouseInput {
  create: PricingCreateWithoutHouseInput
  connect: PricingWhereUniqueInput
}

input PricingCreateWithoutHouseInput {
  basePrice: Float
  highestPrice: Float!
  currency: CURRENCY!
  income: Float
}

"""An edge in a connection."""
type PricingEdge {
  """The item at the end of the edge."""
  node: Pricing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PricingOrderByInput {
  id_ASC
  id_DESC
  basePrice_ASC
  basePrice_DESC
  highestPrice_ASC
  highestPrice_DESC
  currency_ASC
  currency_DESC
  income_ASC
  income_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PricingPreviousValues {
  id: ID!
  basePrice: Float
  highestPrice: Float!
  currency: CURRENCY!
  income: Float
}

type PricingSubscriptionPayload {
  mutation: MutationType!
  node: Pricing
  updatedFields: [String!]
  previousValues: PricingPreviousValues
}

input PricingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PricingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PricingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PricingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PricingWhereInput
}

input PricingUpdateInput {
  basePrice: Float
  highestPrice: Float
  currency: CURRENCY
  income: Float
  House: HouseUpdateOneRequiredWithoutPricingInput
}

input PricingUpdateManyMutationInput {
  basePrice: Float
  highestPrice: Float
  currency: CURRENCY
  income: Float
}

input PricingUpdateOneRequiredWithoutHouseInput {
  create: PricingCreateWithoutHouseInput
  connect: PricingWhereUniqueInput
  update: PricingUpdateWithoutHouseDataInput
  upsert: PricingUpsertWithoutHouseInput
}

input PricingUpdateWithoutHouseDataInput {
  basePrice: Float
  highestPrice: Float
  currency: CURRENCY
  income: Float
}

input PricingUpsertWithoutHouseInput {
  update: PricingUpdateWithoutHouseDataInput!
  create: PricingCreateWithoutHouseInput!
}

input PricingWhereInput {
  """Logical AND on all given filters."""
  AND: [PricingWhereInput!]

  """Logical OR on all given filters."""
  OR: [PricingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PricingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  basePrice: Float

  """All values that are not equal to given value."""
  basePrice_not: Float

  """All values that are contained in given list."""
  basePrice_in: [Float!]

  """All values that are not contained in given list."""
  basePrice_not_in: [Float!]

  """All values less than the given value."""
  basePrice_lt: Float

  """All values less than or equal the given value."""
  basePrice_lte: Float

  """All values greater than the given value."""
  basePrice_gt: Float

  """All values greater than or equal the given value."""
  basePrice_gte: Float
  highestPrice: Float

  """All values that are not equal to given value."""
  highestPrice_not: Float

  """All values that are contained in given list."""
  highestPrice_in: [Float!]

  """All values that are not contained in given list."""
  highestPrice_not_in: [Float!]

  """All values less than the given value."""
  highestPrice_lt: Float

  """All values less than or equal the given value."""
  highestPrice_lte: Float

  """All values greater than the given value."""
  highestPrice_gt: Float

  """All values greater than or equal the given value."""
  highestPrice_gte: Float
  currency: CURRENCY

  """All values that are not equal to given value."""
  currency_not: CURRENCY

  """All values that are contained in given list."""
  currency_in: [CURRENCY!]

  """All values that are not contained in given list."""
  currency_not_in: [CURRENCY!]
  income: Float

  """All values that are not equal to given value."""
  income_not: Float

  """All values that are contained in given list."""
  income_in: [Float!]

  """All values that are not contained in given list."""
  income_not_in: [Float!]

  """All values less than the given value."""
  income_lt: Float

  """All values less than or equal the given value."""
  income_lte: Float

  """All values greater than the given value."""
  income_gt: Float

  """All values greater than or equal the given value."""
  income_gte: Float
  House: HouseWhereInput
}

input PricingWhereUniqueInput {
  id: ID
}

type Query {
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  pricings(where: PricingWhereInput, orderBy: PricingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pricing]!
  viewses(where: ViewsWhereInput, orderBy: ViewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Views]!
  amenitieses(where: AmenitiesWhereInput, orderBy: AmenitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Amenities]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  house_Favoriteds(where: House_FavoritedWhereInput, orderBy: House_FavoritedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House_Favorited]!
  negotiations(where: NegotiationWhereInput, orderBy: NegotiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Negotiation]!
  paymentHouses(where: PaymentHouseWhereInput, orderBy: PaymentHouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentHouse]!
  paymentAccounts(where: PaymentAccountWhereInput, orderBy: PaymentAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentAccount]!
  paypalInformations(where: PaypalInformationWhereInput, orderBy: PaypalInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaypalInformation]!
  creditCardInformations(where: CreditCardInformationWhereInput, orderBy: CreditCardInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCardInformation]!
  paymentLanlordInfoes(where: PaymentLanlordInfoWhereInput, orderBy: PaymentLanlordInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentLanlordInfo]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  communes(where: CommuneWhereInput, orderBy: CommuneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Commune]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  houses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House]!
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture]!
  cities(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [City]!
  room(where: RoomWhereUniqueInput!): Room
  pricing(where: PricingWhereUniqueInput!): Pricing
  views(where: ViewsWhereUniqueInput!): Views
  amenities(where: AmenitiesWhereUniqueInput!): Amenities
  review(where: ReviewWhereUniqueInput!): Review
  booking(where: BookingWhereUniqueInput!): Booking
  house_Favorited(where: House_FavoritedWhereUniqueInput!): House_Favorited
  negotiation(where: NegotiationWhereUniqueInput!): Negotiation
  paymentHouse(where: PaymentHouseWhereUniqueInput!): PaymentHouse
  paymentAccount(where: PaymentAccountWhereUniqueInput!): PaymentAccount
  paypalInformation(where: PaypalInformationWhereUniqueInput!): PaypalInformation
  creditCardInformation(where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  paymentLanlordInfo(where: PaymentLanlordInfoWhereUniqueInput!): PaymentLanlordInfo
  notification(where: NotificationWhereUniqueInput!): Notification
  location(where: LocationWhereUniqueInput!): Location
  commune(where: CommuneWhereUniqueInput!): Commune
  country(where: CountryWhereUniqueInput!): Country
  state(where: StateWhereUniqueInput!): State
  user(where: UserWhereUniqueInput!): User
  house(where: HouseWhereUniqueInput!): House
  video(where: VideoWhereUniqueInput!): Video
  picture(where: PictureWhereUniqueInput!): Picture
  city(where: CityWhereUniqueInput!): City
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  pricingsConnection(where: PricingWhereInput, orderBy: PricingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PricingConnection!
  viewsesConnection(where: ViewsWhereInput, orderBy: ViewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewsConnection!
  amenitiesesConnection(where: AmenitiesWhereInput, orderBy: AmenitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AmenitiesConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  house_FavoritedsConnection(where: House_FavoritedWhereInput, orderBy: House_FavoritedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): House_FavoritedConnection!
  negotiationsConnection(where: NegotiationWhereInput, orderBy: NegotiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NegotiationConnection!
  paymentHousesConnection(where: PaymentHouseWhereInput, orderBy: PaymentHouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentHouseConnection!
  paymentAccountsConnection(where: PaymentAccountWhereInput, orderBy: PaymentAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentAccountConnection!
  paypalInformationsConnection(where: PaypalInformationWhereInput, orderBy: PaypalInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaypalInformationConnection!
  creditCardInformationsConnection(where: CreditCardInformationWhereInput, orderBy: CreditCardInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreditCardInformationConnection!
  paymentLanlordInfoesConnection(where: PaymentLanlordInfoWhereInput, orderBy: PaymentLanlordInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentLanlordInfoConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  communesConnection(where: CommuneWhereInput, orderBy: CommuneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommuneConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  housesConnection(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseConnection!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!
  picturesConnection(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PictureConnection!
  citiesConnection(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CityConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  communication: Int!
  House: House!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  communication: Int!
  House: HouseCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutHouseInput {
  create: [ReviewCreateWithoutHouseInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutHouseInput {
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  communication: Int!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  stars_ASC
  stars_DESC
  accuracy_ASC
  accuracy_DESC
  location_ASC
  location_DESC
  checkIn_ASC
  checkIn_DESC
  value_ASC
  value_DESC
  communication_ASC
  communication_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  communication: Int!
}

input ReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  accuracy: Int

  """All values that are not equal to given value."""
  accuracy_not: Int

  """All values that are contained in given list."""
  accuracy_in: [Int!]

  """All values that are not contained in given list."""
  accuracy_not_in: [Int!]

  """All values less than the given value."""
  accuracy_lt: Int

  """All values less than or equal the given value."""
  accuracy_lte: Int

  """All values greater than the given value."""
  accuracy_gt: Int

  """All values greater than or equal the given value."""
  accuracy_gte: Int
  location: Int

  """All values that are not equal to given value."""
  location_not: Int

  """All values that are contained in given list."""
  location_in: [Int!]

  """All values that are not contained in given list."""
  location_not_in: [Int!]

  """All values less than the given value."""
  location_lt: Int

  """All values less than or equal the given value."""
  location_lte: Int

  """All values greater than the given value."""
  location_gt: Int

  """All values greater than or equal the given value."""
  location_gte: Int
  checkIn: Int

  """All values that are not equal to given value."""
  checkIn_not: Int

  """All values that are contained in given list."""
  checkIn_in: [Int!]

  """All values that are not contained in given list."""
  checkIn_not_in: [Int!]

  """All values less than the given value."""
  checkIn_lt: Int

  """All values less than or equal the given value."""
  checkIn_lte: Int

  """All values greater than the given value."""
  checkIn_gt: Int

  """All values greater than or equal the given value."""
  checkIn_gte: Int
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  communication: Int

  """All values that are not equal to given value."""
  communication_not: Int

  """All values that are contained in given list."""
  communication_in: [Int!]

  """All values that are not contained in given list."""
  communication_not_in: [Int!]

  """All values less than the given value."""
  communication_lt: Int

  """All values less than or equal the given value."""
  communication_lte: Int

  """All values greater than the given value."""
  communication_gt: Int

  """All values greater than or equal the given value."""
  communication_gte: Int
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  communication: Int
  House: HouseUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  communication: Int
}

input ReviewUpdateManyMutationInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  communication: Int
}

input ReviewUpdateManyWithoutHouseInput {
  create: [ReviewCreateWithoutHouseInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutHouseInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [ReviewScalarWhereInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutHouseInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutHouseDataInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  communication: Int
}

input ReviewUpdateWithWhereUniqueWithoutHouseInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutHouseDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutHouseInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutHouseDataInput!
  create: ReviewCreateWithoutHouseInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  stars: Int

  """All values that are not equal to given value."""
  stars_not: Int

  """All values that are contained in given list."""
  stars_in: [Int!]

  """All values that are not contained in given list."""
  stars_not_in: [Int!]

  """All values less than the given value."""
  stars_lt: Int

  """All values less than or equal the given value."""
  stars_lte: Int

  """All values greater than the given value."""
  stars_gt: Int

  """All values greater than or equal the given value."""
  stars_gte: Int
  accuracy: Int

  """All values that are not equal to given value."""
  accuracy_not: Int

  """All values that are contained in given list."""
  accuracy_in: [Int!]

  """All values that are not contained in given list."""
  accuracy_not_in: [Int!]

  """All values less than the given value."""
  accuracy_lt: Int

  """All values less than or equal the given value."""
  accuracy_lte: Int

  """All values greater than the given value."""
  accuracy_gt: Int

  """All values greater than or equal the given value."""
  accuracy_gte: Int
  location: Int

  """All values that are not equal to given value."""
  location_not: Int

  """All values that are contained in given list."""
  location_in: [Int!]

  """All values that are not contained in given list."""
  location_not_in: [Int!]

  """All values less than the given value."""
  location_lt: Int

  """All values less than or equal the given value."""
  location_lte: Int

  """All values greater than the given value."""
  location_gt: Int

  """All values greater than or equal the given value."""
  location_gte: Int
  checkIn: Int

  """All values that are not equal to given value."""
  checkIn_not: Int

  """All values that are contained in given list."""
  checkIn_in: [Int!]

  """All values that are not contained in given list."""
  checkIn_not_in: [Int!]

  """All values less than the given value."""
  checkIn_lt: Int

  """All values less than or equal the given value."""
  checkIn_lte: Int

  """All values greater than the given value."""
  checkIn_gt: Int

  """All values greater than or equal the given value."""
  checkIn_gte: Int
  value: Int

  """All values that are not equal to given value."""
  value_not: Int

  """All values that are contained in given list."""
  value_in: [Int!]

  """All values that are not contained in given list."""
  value_not_in: [Int!]

  """All values less than the given value."""
  value_lt: Int

  """All values less than or equal the given value."""
  value_lte: Int

  """All values greater than the given value."""
  value_gt: Int

  """All values greater than or equal the given value."""
  value_gte: Int
  communication: Int

  """All values that are not equal to given value."""
  communication_not: Int

  """All values that are contained in given list."""
  communication_in: [Int!]

  """All values that are not contained in given list."""
  communication_not_in: [Int!]

  """All values less than the given value."""
  communication_lt: Int

  """All values less than or equal the given value."""
  communication_lte: Int

  """All values greater than the given value."""
  communication_gt: Int

  """All values greater than or equal the given value."""
  communication_gte: Int
  House: HouseWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Room implements Node {
  id: ID!
  label: String!
  house: House!
  picture_previews(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture!]
  video_previews(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video!]
}

"""A connection to a list of items."""
type RoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  label: String!
  house: HouseCreateOneWithoutRoomsInput!
  picture_previews: PictureCreateManyInput
  video_previews: VideoCreateManyInput
}

input RoomCreateManyWithoutHouseInput {
  create: [RoomCreateWithoutHouseInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateWithoutHouseInput {
  label: String!
  picture_previews: PictureCreateManyInput
  video_previews: VideoCreateManyInput
}

"""An edge in a connection."""
type RoomEdge {
  """The item at the end of the edge."""
  node: Room!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoomPreviousValues {
  id: ID!
  label: String!
}

input RoomScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
}

input RoomUpdateInput {
  label: String
  house: HouseUpdateOneRequiredWithoutRoomsInput
  picture_previews: PictureUpdateManyInput
  video_previews: VideoUpdateManyInput
}

input RoomUpdateManyDataInput {
  label: String
}

input RoomUpdateManyMutationInput {
  label: String
}

input RoomUpdateManyWithoutHouseInput {
  create: [RoomCreateWithoutHouseInput!]
  connect: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  delete: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutHouseInput!]
  updateMany: [RoomUpdateManyWithWhereNestedInput!]
  deleteMany: [RoomScalarWhereInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutHouseInput!]
}

input RoomUpdateManyWithWhereNestedInput {
  where: RoomScalarWhereInput!
  data: RoomUpdateManyDataInput!
}

input RoomUpdateWithoutHouseDataInput {
  label: String
  picture_previews: PictureUpdateManyInput
  video_previews: VideoUpdateManyInput
}

input RoomUpdateWithWhereUniqueWithoutHouseInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutHouseDataInput!
}

input RoomUpsertWithWhereUniqueWithoutHouseInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutHouseDataInput!
  create: RoomCreateWithoutHouseInput!
}

input RoomWhereInput {
  """Logical AND on all given filters."""
  AND: [RoomWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  house: HouseWhereInput
  picture_previews_every: PictureWhereInput
  picture_previews_some: PictureWhereInput
  picture_previews_none: PictureWhereInput
  video_previews_every: VideoWhereInput
  video_previews_some: VideoWhereInput
  video_previews_none: VideoWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type State implements Node {
  id: ID!
  name: String!
  rank: Int
  country: Country!
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  name: String!
  rank: Int
  country: CountryCreateOneInput!
}

input StateCreateOneInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rank_ASC
  rank_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatePreviousValues {
  id: ID!
  name: String!
  rank: Int
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

input StateUpdateDataInput {
  name: String
  rank: Int
  country: CountryUpdateOneRequiredInput
}

input StateUpdateInput {
  name: String
  rank: Int
  country: CountryUpdateOneRequiredInput
}

input StateUpdateManyMutationInput {
  name: String
  rank: Int
}

input StateUpdateOneRequiredInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  update: StateUpdateDataInput
  upsert: StateUpsertNestedInput
}

input StateUpsertNestedInput {
  update: StateUpdateDataInput!
  create: StateCreateInput!
}

input StateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rank: Int

  """All values that are not equal to given value."""
  rank_not: Int

  """All values that are contained in given list."""
  rank_in: [Int!]

  """All values that are not contained in given list."""
  rank_not_in: [Int!]

  """All values less than the given value."""
  rank_lt: Int

  """All values less than or equal the given value."""
  rank_lte: Int

  """All values greater than the given value."""
  rank_gt: Int

  """All values greater than or equal the given value."""
  rank_gte: Int
  country: CountryWhereInput
}

input StateWhereUniqueInput {
  id: ID
}

type Subscription {
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  pricing(where: PricingSubscriptionWhereInput): PricingSubscriptionPayload
  views(where: ViewsSubscriptionWhereInput): ViewsSubscriptionPayload
  amenities(where: AmenitiesSubscriptionWhereInput): AmenitiesSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  house_Favorited(where: House_FavoritedSubscriptionWhereInput): House_FavoritedSubscriptionPayload
  negotiation(where: NegotiationSubscriptionWhereInput): NegotiationSubscriptionPayload
  paymentHouse(where: PaymentHouseSubscriptionWhereInput): PaymentHouseSubscriptionPayload
  paymentAccount(where: PaymentAccountSubscriptionWhereInput): PaymentAccountSubscriptionPayload
  paypalInformation(where: PaypalInformationSubscriptionWhereInput): PaypalInformationSubscriptionPayload
  creditCardInformation(where: CreditCardInformationSubscriptionWhereInput): CreditCardInformationSubscriptionPayload
  paymentLanlordInfo(where: PaymentLanlordInfoSubscriptionWhereInput): PaymentLanlordInfoSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  commune(where: CommuneSubscriptionWhereInput): CommuneSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  house(where: HouseSubscriptionWhereInput): HouseSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
  picture(where: PictureSubscriptionWhereInput): PictureSubscriptionPayload
  city(where: CitySubscriptionWhereInput): CitySubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int!
  responseTime: Int
  isSuperHost: Boolean!
  ownedHouses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House!]
  location: Location
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  paidContacts(where: PaymentLanlordInfoWhereInput, orderBy: PaymentLanlordInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentLanlordInfo!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  profilePicture: Picture
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseCreateManyWithoutHostInput
  location: LocationCreateOneInput
  bookings: BookingCreateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoCreateManyWithoutClientInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOwnedHousesInput {
  create: UserCreateWithoutOwnedHousesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPaidContactsInput {
  create: UserCreateWithoutPaidContactsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookingsInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseCreateManyWithoutHostInput
  location: LocationCreateOneInput
  paidContacts: PaymentLanlordInfoCreateManyWithoutClientInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
}

input UserCreateWithoutNotificationsInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseCreateManyWithoutHostInput
  location: LocationCreateOneInput
  bookings: BookingCreateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoCreateManyWithoutClientInput
  profilePicture: PictureCreateOneInput
}

input UserCreateWithoutOwnedHousesInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  location: LocationCreateOneInput
  bookings: BookingCreateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoCreateManyWithoutClientInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
}

input UserCreateWithoutPaidContactsInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseCreateManyWithoutHostInput
  location: LocationCreateOneInput
  bookings: BookingCreateManyWithoutBookeeInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
  status_ASC
  status_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phone1_ASC
  phone1_DESC
  phone2_ASC
  phone2_DESC
  primaryPhone_ASC
  primaryPhone_DESC
  responseTime_ASC
  responseTime_DESC
  isSuperHost_ASC
  isSuperHost_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String!
  lastName: String!
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int!
  responseTime: Int
  isSuperHost: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseUpdateManyWithoutHostInput
  location: LocationUpdateOneInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoUpdateManyWithoutClientInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseUpdateManyWithoutHostInput
  location: LocationUpdateOneInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoUpdateManyWithoutClientInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateManyMutationInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBookingsDataInput
  upsert: UserUpsertWithoutBookingsInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutOwnedHousesInput {
  create: UserCreateWithoutOwnedHousesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOwnedHousesDataInput
  upsert: UserUpsertWithoutOwnedHousesInput
}

input UserUpdateOneRequiredWithoutPaidContactsInput {
  create: UserCreateWithoutPaidContactsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPaidContactsDataInput
  upsert: UserUpsertWithoutPaidContactsInput
}

input UserUpdateWithoutBookingsDataInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseUpdateManyWithoutHostInput
  location: LocationUpdateOneInput
  paidContacts: PaymentLanlordInfoUpdateManyWithoutClientInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateWithoutNotificationsDataInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseUpdateManyWithoutHostInput
  location: LocationUpdateOneInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoUpdateManyWithoutClientInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateWithoutOwnedHousesDataInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  location: LocationUpdateOneInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paidContacts: PaymentLanlordInfoUpdateManyWithoutClientInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateWithoutPaidContactsDataInput {
  role: String
  status: Boolean
  facebookUserId: String
  firstName: String
  lastName: String
  email: String
  password: String
  phone1: String
  phone2: String
  primaryPhone: Int
  responseTime: Int
  isSuperHost: Boolean
  ownedHouses: HouseUpdateManyWithoutHostInput
  location: LocationUpdateOneInput
  bookings: BookingUpdateManyWithoutBookeeInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBookingsInput {
  update: UserUpdateWithoutBookingsDataInput!
  create: UserCreateWithoutBookingsInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutOwnedHousesInput {
  update: UserUpdateWithoutOwnedHousesDataInput!
  create: UserCreateWithoutOwnedHousesInput!
}

input UserUpsertWithoutPaidContactsInput {
  update: UserUpdateWithoutPaidContactsDataInput!
  create: UserCreateWithoutPaidContactsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  status: Boolean

  """All values that are not equal to given value."""
  status_not: Boolean
  facebookUserId: String

  """All values that are not equal to given value."""
  facebookUserId_not: String

  """All values that are contained in given list."""
  facebookUserId_in: [String!]

  """All values that are not contained in given list."""
  facebookUserId_not_in: [String!]

  """All values less than the given value."""
  facebookUserId_lt: String

  """All values less than or equal the given value."""
  facebookUserId_lte: String

  """All values greater than the given value."""
  facebookUserId_gt: String

  """All values greater than or equal the given value."""
  facebookUserId_gte: String

  """All values containing the given string."""
  facebookUserId_contains: String

  """All values not containing the given string."""
  facebookUserId_not_contains: String

  """All values starting with the given string."""
  facebookUserId_starts_with: String

  """All values not starting with the given string."""
  facebookUserId_not_starts_with: String

  """All values ending with the given string."""
  facebookUserId_ends_with: String

  """All values not ending with the given string."""
  facebookUserId_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone1: String

  """All values that are not equal to given value."""
  phone1_not: String

  """All values that are contained in given list."""
  phone1_in: [String!]

  """All values that are not contained in given list."""
  phone1_not_in: [String!]

  """All values less than the given value."""
  phone1_lt: String

  """All values less than or equal the given value."""
  phone1_lte: String

  """All values greater than the given value."""
  phone1_gt: String

  """All values greater than or equal the given value."""
  phone1_gte: String

  """All values containing the given string."""
  phone1_contains: String

  """All values not containing the given string."""
  phone1_not_contains: String

  """All values starting with the given string."""
  phone1_starts_with: String

  """All values not starting with the given string."""
  phone1_not_starts_with: String

  """All values ending with the given string."""
  phone1_ends_with: String

  """All values not ending with the given string."""
  phone1_not_ends_with: String
  phone2: String

  """All values that are not equal to given value."""
  phone2_not: String

  """All values that are contained in given list."""
  phone2_in: [String!]

  """All values that are not contained in given list."""
  phone2_not_in: [String!]

  """All values less than the given value."""
  phone2_lt: String

  """All values less than or equal the given value."""
  phone2_lte: String

  """All values greater than the given value."""
  phone2_gt: String

  """All values greater than or equal the given value."""
  phone2_gte: String

  """All values containing the given string."""
  phone2_contains: String

  """All values not containing the given string."""
  phone2_not_contains: String

  """All values starting with the given string."""
  phone2_starts_with: String

  """All values not starting with the given string."""
  phone2_not_starts_with: String

  """All values ending with the given string."""
  phone2_ends_with: String

  """All values not ending with the given string."""
  phone2_not_ends_with: String
  primaryPhone: Int

  """All values that are not equal to given value."""
  primaryPhone_not: Int

  """All values that are contained in given list."""
  primaryPhone_in: [Int!]

  """All values that are not contained in given list."""
  primaryPhone_not_in: [Int!]

  """All values less than the given value."""
  primaryPhone_lt: Int

  """All values less than or equal the given value."""
  primaryPhone_lte: Int

  """All values greater than the given value."""
  primaryPhone_gt: Int

  """All values greater than or equal the given value."""
  primaryPhone_gte: Int
  responseTime: Int

  """All values that are not equal to given value."""
  responseTime_not: Int

  """All values that are contained in given list."""
  responseTime_in: [Int!]

  """All values that are not contained in given list."""
  responseTime_not_in: [Int!]

  """All values less than the given value."""
  responseTime_lt: Int

  """All values less than or equal the given value."""
  responseTime_lte: Int

  """All values greater than the given value."""
  responseTime_gt: Int

  """All values greater than or equal the given value."""
  responseTime_gte: Int
  isSuperHost: Boolean

  """All values that are not equal to given value."""
  isSuperHost_not: Boolean
  ownedHouses_every: HouseWhereInput
  ownedHouses_some: HouseWhereInput
  ownedHouses_none: HouseWhereInput
  location: LocationWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  paidContacts_every: PaymentLanlordInfoWhereInput
  paidContacts_some: PaymentLanlordInfoWhereInput
  paidContacts_none: PaymentLanlordInfoWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  profilePicture: PictureWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
  email: String
}

type Video implements Node {
  id: ID!
  url: String!
}

"""A connection to a list of items."""
type VideoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  url: String!
}

input VideoCreateManyInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

"""An edge in a connection."""
type VideoEdge {
  """The item at the end of the edge."""
  node: Video!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VideoPreviousValues {
  id: ID!
  url: String!
}

input VideoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
}

input VideoUpdateDataInput {
  url: String
}

input VideoUpdateInput {
  url: String
}

input VideoUpdateManyDataInput {
  url: String
}

input VideoUpdateManyInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
  disconnect: [VideoWhereUniqueInput!]
  delete: [VideoWhereUniqueInput!]
  update: [VideoUpdateWithWhereUniqueNestedInput!]
  updateMany: [VideoUpdateManyWithWhereNestedInput!]
  deleteMany: [VideoScalarWhereInput!]
  upsert: [VideoUpsertWithWhereUniqueNestedInput!]
}

input VideoUpdateManyMutationInput {
  url: String
}

input VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput!
  data: VideoUpdateManyDataInput!
}

input VideoUpdateWithWhereUniqueNestedInput {
  where: VideoWhereUniqueInput!
  data: VideoUpdateDataInput!
}

input VideoUpsertWithWhereUniqueNestedInput {
  where: VideoWhereUniqueInput!
  update: VideoUpdateDataInput!
  create: VideoCreateInput!
}

input VideoWhereInput {
  """Logical AND on all given filters."""
  AND: [VideoWhereInput!]

  """Logical OR on all given filters."""
  OR: [VideoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VideoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input VideoWhereUniqueInput {
  id: ID
}

type Views implements Node {
  id: ID!
  lastWeek: Int!
  House: House!
}

"""A connection to a list of items."""
type ViewsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ViewsEdge]!
  aggregate: AggregateViews!
}

input ViewsCreateInput {
  lastWeek: Int!
  House: HouseCreateOneWithoutViewsInput!
}

input ViewsCreateOneWithoutHouseInput {
  create: ViewsCreateWithoutHouseInput
  connect: ViewsWhereUniqueInput
}

input ViewsCreateWithoutHouseInput {
  lastWeek: Int!
}

"""An edge in a connection."""
type ViewsEdge {
  """The item at the end of the edge."""
  node: Views!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ViewsOrderByInput {
  id_ASC
  id_DESC
  lastWeek_ASC
  lastWeek_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ViewsPreviousValues {
  id: ID!
  lastWeek: Int!
}

type ViewsSubscriptionPayload {
  mutation: MutationType!
  node: Views
  updatedFields: [String!]
  previousValues: ViewsPreviousValues
}

input ViewsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ViewsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ViewsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ViewsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ViewsWhereInput
}

input ViewsUpdateInput {
  lastWeek: Int
  House: HouseUpdateOneRequiredWithoutViewsInput
}

input ViewsUpdateManyMutationInput {
  lastWeek: Int
}

input ViewsUpdateOneWithoutHouseInput {
  create: ViewsCreateWithoutHouseInput
  connect: ViewsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ViewsUpdateWithoutHouseDataInput
  upsert: ViewsUpsertWithoutHouseInput
}

input ViewsUpdateWithoutHouseDataInput {
  lastWeek: Int
}

input ViewsUpsertWithoutHouseInput {
  update: ViewsUpdateWithoutHouseDataInput!
  create: ViewsCreateWithoutHouseInput!
}

input ViewsWhereInput {
  """Logical AND on all given filters."""
  AND: [ViewsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ViewsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ViewsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lastWeek: Int

  """All values that are not equal to given value."""
  lastWeek_not: Int

  """All values that are contained in given list."""
  lastWeek_in: [Int!]

  """All values that are not contained in given list."""
  lastWeek_not_in: [Int!]

  """All values less than the given value."""
  lastWeek_lt: Int

  """All values less than or equal the given value."""
  lastWeek_lte: Int

  """All values greater than the given value."""
  lastWeek_gt: Int

  """All values greater than or equal the given value."""
  lastWeek_gte: Int
  House: HouseWhereInput
}

input ViewsWhereUniqueInput {
  id: ID
}
